{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from \"three\";\nvar PVRLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(PVRLoader, _CompressedTextureLoa);\n  var _super = _createSuper(PVRLoader);\n  function PVRLoader(manager) {\n    _classCallCheck(this, PVRLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(PVRLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var headerLengthInt = 13;\n      var header = new Uint32Array(buffer, 0, headerLengthInt);\n      var pvrDatas = {\n        buffer: buffer,\n        header: header,\n        loadMipmaps: loadMipmaps\n      };\n      if (header[0] === 55727696) {\n        return _parseV3(pvrDatas);\n      } else if (header[11] === 559044176) {\n        return _parseV2(pvrDatas);\n      } else {\n        console.error(\"THREE.PVRLoader: Unknown PVR format.\");\n      }\n    }\n  }]);\n  return PVRLoader;\n}(CompressedTextureLoader);\nfunction _parseV3(pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n    pixelFormat = header[2],\n    height = header[6],\n    width = header[7],\n    numFaces = header[10],\n    numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error(\"THREE.PVRLoader: Unsupported PVR format:\", pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\nfunction _parseV2(pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n    height = header[1],\n    width = header[2],\n    numMipmaps = header[3],\n    flags = header[4],\n    bitmaskAlpha = header[10],\n    numSurfs = header[12];\n  var TYPE_MASK = 255;\n  var PVRTC_2 = 24,\n    PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n  var _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error(\"THREE.PVRLoader: Unknown PVR format:\", formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\nfunction _extract(pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n    dataSize = 0,\n    blockSize = 0,\n    blockWidth = 0,\n    blockHeight = 0,\n    widthBlocks = 0,\n    heightBlocks = 0;\n  var bpp = pvrDatas.bpp,\n    numSurfs = pvrDatas.numSurfaces;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n      sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n}\nexport { PVRLoader };\n//# sourceMappingURL=PVRLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}