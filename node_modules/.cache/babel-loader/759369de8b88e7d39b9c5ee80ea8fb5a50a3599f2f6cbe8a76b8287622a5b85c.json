{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass VarNode extends Node {\n  constructor(node, name = null) {\n    super();\n    this.node = node;\n    this.name = name;\n  }\n  assign(node) {\n    node.traverse((childNode, replaceNode) => {\n      if (replaceNode && childNode.uuid === this.uuid) {\n        replaceNode(this.node);\n      }\n    });\n    this.node = node;\n    return this;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  generate(builder) {\n    const node = this.node;\n    const name = this.name;\n    if (name === null && node.isTempNode === true) {\n      return node.build(builder);\n    }\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addLineFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n}\nexport default VarNode;\nexport const temp = nodeProxy(VarNode);\naddNodeElement('temp', temp);\naddNodeClass('VarNode', VarNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}