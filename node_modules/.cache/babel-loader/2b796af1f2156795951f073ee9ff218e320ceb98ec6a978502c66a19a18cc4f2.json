{"ast":null,"code":"import Object3DNode from './Object3DNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { label } from '../core/ContextNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass CameraNode extends Object3DNode {\n  constructor(scope = CameraNode.POSITION) {\n    super(scope);\n  }\n  getNodeType(builder) {\n    const scope = this.scope;\n    if (scope === CameraNode.PROJECTION_MATRIX) {\n      return 'mat4';\n    } else if (scope === CameraNode.NEAR || scope === CameraNode.FAR) {\n      return 'float';\n    }\n    return super.getNodeType(builder);\n  }\n  update(frame) {\n    const camera = frame.camera;\n    const uniformNode = this._uniformNode;\n    const scope = this.scope;\n    if (scope === CameraNode.VIEW_MATRIX) {\n      uniformNode.value = camera.matrixWorldInverse;\n    } else if (scope === CameraNode.PROJECTION_MATRIX) {\n      uniformNode.value = camera.projectionMatrix;\n    } else if (scope === CameraNode.NEAR) {\n      uniformNode.value = camera.near;\n    } else if (scope === CameraNode.FAR) {\n      uniformNode.value = camera.far;\n    } else {\n      this.object3d = camera;\n      super.update(frame);\n    }\n  }\n  generate(builder) {\n    const scope = this.scope;\n    if (scope === CameraNode.PROJECTION_MATRIX) {\n      this._uniformNode.nodeType = 'mat4';\n    } else if (scope === CameraNode.NEAR || scope === CameraNode.FAR) {\n      this._uniformNode.nodeType = 'float';\n    }\n    return super.generate(builder);\n  }\n}\nCameraNode.PROJECTION_MATRIX = 'projectionMatrix';\nCameraNode.NEAR = 'near';\nCameraNode.FAR = 'far';\nexport default CameraNode;\nexport const cameraProjectionMatrix = label(nodeImmutable(CameraNode, CameraNode.PROJECTION_MATRIX), 'projectionMatrix');\nexport const cameraNear = nodeImmutable(CameraNode, CameraNode.NEAR);\nexport const cameraFar = nodeImmutable(CameraNode, CameraNode.FAR);\nexport const cameraViewMatrix = nodeImmutable(CameraNode, CameraNode.VIEW_MATRIX);\nexport const cameraNormalMatrix = nodeImmutable(CameraNode, CameraNode.NORMAL_MATRIX);\nexport const cameraWorldMatrix = nodeImmutable(CameraNode, CameraNode.WORLD_MATRIX);\nexport const cameraPosition = nodeImmutable(CameraNode, CameraNode.POSITION);\naddNodeClass('CameraNode', CameraNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}