{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { shininess, specularColor } from '../core/PropertyNode.js';\nimport { materialShininess, materialSpecularColor } from '../accessors/MaterialNode.js';\nimport { float } from '../shadernode/ShaderNode.js';\nimport PhongLightingModel from '../functions/PhongLightingModel.js';\nimport { MeshPhongMaterial } from 'three';\nconst defaultValues = new MeshPhongMaterial();\nclass MeshPhongNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshPhongNodeMaterial = true;\n    this.lights = true;\n    this.shininessNode = null;\n    this.specularNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  setupLightingModel( /*builder*/\n  ) {\n    return new PhongLightingModel();\n  }\n  setupVariants({\n    stack\n  }) {\n    // SHININESS\n\n    const shininessNode = (this.shininessNode ? float(this.shininessNode) : materialShininess).max(1e-4); // to prevent pow( 0.0, 0.0 )\n\n    stack.assign(shininess, shininessNode);\n\n    // SPECULAR COLOR\n\n    const specularNode = this.specularNode || materialSpecularColor;\n    stack.assign(specularColor, specularNode);\n  }\n  copy(source) {\n    this.shininessNode = source.shininessNode;\n    this.specularNode = source.specularNode;\n    return super.copy(source);\n  }\n}\nexport default MeshPhongNodeMaterial;\naddNodeMaterial('MeshPhongNodeMaterial', MeshPhongNodeMaterial);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}