{"ast":null,"code":"import _objectSpread from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"eps\", \"style\", \"className\", \"prepend\", \"center\", \"fullscreen\", \"portal\", \"distanceFactor\", \"sprite\", \"transform\", \"occlude\", \"onOcclude\", \"castShadow\", \"receiveShadow\", \"material\", \"geometry\", \"zIndexRange\", \"calculatePosition\", \"as\", \"wrapperClass\", \"pointerEvents\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nvar v1 = /* @__PURE__ */new Vector3();\nvar v2 = /* @__PURE__ */new Vector3();\nvar v3 = /* @__PURE__ */new Vector3();\nfunction defaultCalculatePosition(el, camera, size) {\n  var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  var widthHalf = size.width / 2;\n  var heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\nfunction isObjectBehindCamera(el, camera) {\n  var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  var deltaCamObj = objectPos.sub(cameraPos);\n  var camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  var elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  var screenPos = elPos.clone();\n  screenPos.project(camera);\n  raycaster.setFromCamera(screenPos, camera);\n  var intersects = raycaster.intersectObjects(occlude, true);\n  if (intersects.length) {\n    var intersectionDistance = intersects[0].distance;\n    var pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n  return true;\n}\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    var vFOV = camera.fov * Math.PI / 180;\n    var dist = objectPos.distanceTo(cameraPos);\n    var scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    var objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    var cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    var dist = objectPos.distanceTo(cameraPos);\n    var A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    var B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n  return undefined;\n}\nvar epsilon = function epsilon(value) {\n  return Math.abs(value) < 1e-10 ? 0 : value;\n};\nfunction getCSSMatrix(matrix, multipliers) {\n  var prepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var matrix3d = 'matrix3d(';\n  for (var i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n  return prepend + matrix3d;\n}\nvar getCameraCSSMatrix = function (multipliers) {\n  return function (matrix) {\n    return getCSSMatrix(matrix, multipliers);\n  };\n}([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\nvar getObjectCSSMatrix = function (scaleMultipliers) {\n  return function (matrix, factor) {\n    return getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n  };\n}(function (f) {\n  return [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1];\n});\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\nvar Html = /* @__PURE__ */React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    _ref$eps = _ref.eps,\n    eps = _ref$eps === void 0 ? 0.001 : _ref$eps,\n    style = _ref.style,\n    className = _ref.className,\n    prepend = _ref.prepend,\n    center = _ref.center,\n    fullscreen = _ref.fullscreen,\n    portal = _ref.portal,\n    distanceFactor = _ref.distanceFactor,\n    _ref$sprite = _ref.sprite,\n    sprite = _ref$sprite === void 0 ? false : _ref$sprite,\n    _ref$transform = _ref.transform,\n    transform = _ref$transform === void 0 ? false : _ref$transform,\n    occlude = _ref.occlude,\n    onOcclude = _ref.onOcclude,\n    castShadow = _ref.castShadow,\n    receiveShadow = _ref.receiveShadow,\n    material = _ref.material,\n    geometry = _ref.geometry,\n    _ref$zIndexRange = _ref.zIndexRange,\n    zIndexRange = _ref$zIndexRange === void 0 ? [16777271, 0] : _ref$zIndexRange,\n    _ref$calculatePositio = _ref.calculatePosition,\n    calculatePosition = _ref$calculatePositio === void 0 ? defaultCalculatePosition : _ref$calculatePositio,\n    _ref$as = _ref.as,\n    as = _ref$as === void 0 ? 'div' : _ref$as,\n    wrapperClass = _ref.wrapperClass,\n    _ref$pointerEvents = _ref.pointerEvents,\n    pointerEvents = _ref$pointerEvents === void 0 ? 'auto' : _ref$pointerEvents,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useThree = useThree(),\n    gl = _useThree.gl,\n    camera = _useThree.camera,\n    scene = _useThree.scene,\n    size = _useThree.size,\n    raycaster = _useThree.raycaster,\n    events = _useThree.events,\n    viewport = _useThree.viewport;\n  var _React$useState = React.useState(function () {\n      return document.createElement(as);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    el = _React$useState2[0];\n  var root = React.useRef();\n  var group = React.useRef(null);\n  var oldZoom = React.useRef(0);\n  var oldPosition = React.useRef([0, 0]);\n  var transformOuterRef = React.useRef(null);\n  var transformInnerRef = React.useRef(null);\n  // Append to the connected element, which makes HTML work with views\n  var target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  var occlusionMeshRef = React.useRef(null);\n  var isMeshSizeSet = React.useRef(false);\n  var isRayCastOcclusion = React.useMemo(function () {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(function () {\n    var el = gl.domElement;\n    if (occlude && occlude === 'blending') {\n      el.style.zIndex = \"\".concat(Math.floor(zIndexRange[0] / 2));\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude]);\n  React.useLayoutEffect(function () {\n    if (group.current) {\n      var currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n      if (transform) {\n        el.style.cssText = \"position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;\";\n      } else {\n        var vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = \"position:absolute;top:0;left:0;transform:translate3d(\".concat(vec[0], \"px,\").concat(vec[1], \"px,0);transform-origin:0 0;\");\n      }\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n      return function () {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(function () {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  var styles = React.useMemo(function () {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return _objectSpread(_objectSpread({\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none'\n      }, fullscreen && {\n        top: -size.height / 2,\n        left: -size.width / 2,\n        width: size.width,\n        height: size.height\n      }), style);\n    }\n  }, [style, center, fullscreen, size, transform]);\n  var transformInnerStyles = React.useMemo(function () {\n    return {\n      position: 'absolute',\n      pointerEvents: pointerEvents\n    };\n  }, [pointerEvents]);\n  React.useLayoutEffect(function () {\n    isMeshSizeSet.current = false;\n    if (transform) {\n      var _root$current;\n      (_root$current = root.current) == null || _root$current.render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n      (_root$current2 = root.current) == null || _root$current2.render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  var visible = React.useRef(true);\n  useFrame(function (gl) {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      var vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        var isBehindCamera = isObjectBehindCamera(group.current, camera);\n        var raytraceTarget = false;\n        if (isRayCastOcclusion) {\n          if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(function (item) {\n              return item.current;\n            });\n          } else if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          }\n        }\n        var previouslyVisible = visible.current;\n        if (raytraceTarget) {\n          var isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n        var halfRange = Math.floor(zIndexRange[0] / 2);\n        var zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = \"\".concat(objectZIndex(group.current, camera, zRange));\n        if (transform) {\n          var widthHalf = size.width / 2,\n            heightHalf = size.height / 2;\n          var fov = camera.projectionMatrix.elements[5] * heightHalf;\n          var isOrthographicCamera = camera.isOrthographicCamera,\n            top = camera.top,\n            left = camera.left,\n            bottom = camera.bottom,\n            right = camera.right;\n          var cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          var cameraTransform = isOrthographicCamera ? \"scale(\".concat(fov, \")translate(\").concat(epsilon(-(right + left) / 2), \"px,\").concat(epsilon((top + bottom) / 2), \"px)\") : \"translateZ(\".concat(fov, \"px)\");\n          var matrix = group.current.matrixWorld;\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : \"\".concat(fov, \"px\");\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = \"\".concat(cameraTransform).concat(cameraMatrix, \"translate(\").concat(widthHalf, \"px,\").concat(heightHalf, \"px)\");\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          var scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = \"translate3d(\".concat(vec[0], \"px,\").concat(vec[1], \"px,0) scale(\").concat(scale, \")\");\n        }\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          var _el = transformOuterRef.current.children[0];\n          if (_el != null && _el.clientWidth && _el != null && _el.clientHeight) {\n            var _isOrthographicCamera = camera.isOrthographicCamera;\n            if (_isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              var ratio = (distanceFactor || 10) / 400;\n              var w = _el.clientWidth * ratio;\n              var h = _el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        var ele = el.children[0];\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          var _ratio = 1 / viewport.factor;\n          var _w = ele.clientWidth * _ratio;\n          var _h = ele.clientHeight * _ratio;\n          occlusionMeshRef.current.scale.set(_w, _h, 1);\n          isMeshSizeSet.current = true;\n        }\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  var shaders = React.useMemo(function () {\n    return {\n      vertexShader: !transform ? /* glsl */\"\\n          /*\\n            This shader is from the THREE's SpriteMaterial.\\n            We need to turn the backing plane into a Sprite\\n            (make it always face the camera) if \\\"transfrom\\\" \\n            is false. \\n          */\\n          #include <common>\\n\\n          void main() {\\n            vec2 center = vec2(0., 1.);\\n            float rotation = 0.0;\\n            \\n            // This is somewhat arbitrary, but it seems to work well\\n            // Need to figure out how to derive this dynamically if it even matters\\n            float size = 0.03;\\n\\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n            vec2 scale;\\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n            if ( isPerspective ) scale *= - mvPosition.z;\\n\\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\\n            vec2 rotatedPosition;\\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n            mvPosition.xy += rotatedPosition;\\n\\n            gl_Position = projectionMatrix * mvPosition;\\n          }\\n      \" : undefined,\n      fragmentShader: /* glsl */\"\\n        void main() {\\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n        }\\n      \"\n    };\n  }, [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\nexport { Html };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}