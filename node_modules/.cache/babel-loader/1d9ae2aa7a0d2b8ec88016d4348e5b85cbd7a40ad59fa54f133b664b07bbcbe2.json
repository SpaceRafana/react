{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { getValueType, getValueFromType, arrayBufferToBase64 } from './NodeUtils.js';\nclass InputNode extends Node {\n  constructor(value, nodeType = null) {\n    super(nodeType);\n    this.isInputNode = true;\n    this.value = value;\n    this.precision = null;\n  }\n  getNodeType( /*builder*/\n  ) {\n    if (this.nodeType === null) {\n      return getValueType(this.value);\n    }\n    return this.nodeType;\n  }\n  getInputType(builder) {\n    return this.getNodeType(builder);\n  }\n  setPrecision(precision) {\n    this.precision = precision;\n    return this;\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value;\n    if (this.value && this.value.toArray) data.value = this.value.toArray();\n    data.valueType = getValueType(this.value);\n    data.nodeType = this.nodeType;\n    if (data.valueType === 'ArrayBuffer') data.value = arrayBufferToBase64(data.value);\n    data.precision = this.precision;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.nodeType = data.nodeType;\n    this.value = Array.isArray(data.value) ? getValueFromType(data.valueType, ...data.value) : data.value;\n    this.precision = data.precision || null;\n    if (this.value && this.value.fromArray) this.value = this.value.fromArray(data.value);\n  }\n  generate( /*builder, output*/\n  ) {\n    console.warn('Abstract function.');\n  }\n}\nexport default InputNode;\naddNodeClass('InputNode', InputNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}