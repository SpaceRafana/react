{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping } from \"three\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nvar LUT3dlLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUT3dlLoader, _Loader);\n  var _super = _createSuper(LUT3dlLoader);\n  function LUT3dlLoader() {\n    _classCallCheck(this, LUT3dlLoader);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LUT3dlLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"text\");\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      str = str.replace(/^#.*?(\\n|\\r)/gm, \"\").replace(/^\\s*?(\\n|\\r)/gm, \"\").trim();\n      var lines = str.split(/[\\n\\r]+/g);\n      var gridLines = lines[0].trim().split(/\\s+/g).map(function (e) {\n        return parseFloat(e);\n      });\n      var gridStep = gridLines[1] - gridLines[0];\n      var size = gridLines.length;\n      for (var i = 1, l = gridLines.length; i < l; i++) {\n        if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n          throw new Error(\"LUT3dlLoader: Inconsistent grid size not supported.\");\n        }\n      }\n      var dataArray = new Array(size * size * size * 4);\n      var index = 0;\n      var maxOutputValue = 0;\n      for (var _i = 1, _l = lines.length; _i < _l; _i++) {\n        var line = lines[_i].trim();\n        var split = line.split(/\\s/g);\n        var r = parseFloat(split[0]);\n        var g = parseFloat(split[1]);\n        var b = parseFloat(split[2]);\n        maxOutputValue = Math.max(maxOutputValue, r, g, b);\n        var bLayer = index % size;\n        var gLayer = Math.floor(index / size) % size;\n        var rLayer = Math.floor(index / (size * size)) % size;\n        var pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n        dataArray[4 * pixelIndex + 0] = r;\n        dataArray[4 * pixelIndex + 1] = g;\n        dataArray[4 * pixelIndex + 2] = b;\n        dataArray[4 * pixelIndex + 3] = 1;\n        index += 1;\n      }\n      var bits = Math.ceil(Math.log2(maxOutputValue));\n      var maxBitValue = Math.pow(2, bits);\n      for (var _i2 = 0, _l2 = dataArray.length; _i2 < _l2; _i2 += 4) {\n        var _r = dataArray[_i2 + 0];\n        var _g = dataArray[_i2 + 1];\n        var _b = dataArray[_i2 + 2];\n        dataArray[_i2 + 0] = 255 * _r / maxBitValue;\n        dataArray[_i2 + 1] = 255 * _g / maxBitValue;\n        dataArray[_i2 + 2] = 255 * _b / maxBitValue;\n      }\n      var data = new Uint8Array(dataArray);\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.format = RGBAFormat;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      var texture3D = new Data3DTexture();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.format = RGBAFormat;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      texture3D.needsUpdate = true;\n      return {\n        size: size,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n  return LUT3dlLoader;\n}(Loader);\nexport { LUT3dlLoader };\n//# sourceMappingURL=LUT3dlLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}