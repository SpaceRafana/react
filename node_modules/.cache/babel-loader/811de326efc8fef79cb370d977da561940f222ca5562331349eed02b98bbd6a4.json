{"ast":null,"code":"import { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { tslFn, vec2, vec4 } from '../../shadernode/ShaderNode.js';\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nconst DFGApprox = tslFn(inputs => {\n  const {\n    roughness\n  } = inputs;\n  const dotNV = inputs.dotNV || transformedNormalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n\n  const c0 = vec4(-1, -0.0275, -0.572, 0.022);\n  const c1 = vec4(1, 0.0425, 1.04, -0.04);\n  const r = roughness.mul(c0).add(c1);\n  const a004 = r.x.mul(r.x).min(dotNV.mul(-9.28).exp2()).mul(r.x).add(r.y);\n  const fab = vec2(-1.04, 1.04).mul(a004).add(r.zw);\n  return fab;\n});\nexport default DFGApprox;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}