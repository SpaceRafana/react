{"ast":null,"code":"import * as THREE from 'three';\nimport { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useMemo, useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nfunction useCubeCamera() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 256 : _ref$resolution,\n    _ref$near = _ref.near,\n    near = _ref$near === void 0 ? 0.1 : _ref$near,\n    _ref$far = _ref.far,\n    far = _ref$far === void 0 ? 1000 : _ref$far,\n    envMap = _ref.envMap,\n    fog = _ref.fog;\n  var gl = useThree(function (_ref2) {\n    var gl = _ref2.gl;\n    return gl;\n  });\n  var scene = useThree(function (_ref3) {\n    var scene = _ref3.scene;\n    return scene;\n  });\n  var fbo = useMemo(function () {\n    var fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  useEffect(function () {\n    return function () {\n      fbo.dispose();\n    };\n  }, [fbo]);\n  var camera = useMemo(function () {\n    return new THREE.CubeCamera(near, far, fbo);\n  }, [near, far, fbo]);\n  var originalFog;\n  var originalBackground;\n  var update = React.useCallback(function () {\n    originalFog = scene.fog;\n    originalBackground = scene.background;\n    scene.background = envMap || originalBackground;\n    scene.fog = fog || originalFog;\n    camera.update(gl, scene);\n    scene.fog = originalFog;\n    scene.background = originalBackground;\n  }, [gl, scene, camera]);\n  return {\n    fbo: fbo,\n    camera: camera,\n    update: update\n  };\n}\nexport { useCubeCamera };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}