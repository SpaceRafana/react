{"ast":null,"code":"import _regeneratorRuntime from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar _VRButton = /*#__PURE__*/function () {\n  function _VRButton() {\n    _classCallCheck(this, _VRButton);\n  }\n  _createClass(_VRButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer) {\n      var sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var button = document.createElement(\"button\");\n      function showEnterVR() {\n        var currentSession = null;\n        function onSessionStarted(_x) {\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function _onSessionStarted() {\n          _onSessionStarted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  session.addEventListener(\"end\", onSessionEnded);\n                  _context.next = 3;\n                  return renderer.xr.setSession(session);\n                case 3:\n                  button.textContent = \"EXIT VR\";\n                  currentSession = session;\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function onSessionEnded() {\n          currentSession.removeEventListener(\"end\", onSessionEnded);\n          button.textContent = \"ENTER VR\";\n          currentSession = null;\n        }\n        button.style.display = \"\";\n        button.style.cursor = \"pointer\";\n        button.style.left = \"calc(50% - 50px)\";\n        button.style.width = \"100px\";\n        button.textContent = \"ENTER VR\";\n        button.onmouseenter = function () {\n          button.style.opacity = \"1.0\";\n        };\n        button.onmouseleave = function () {\n          button.style.opacity = \"0.5\";\n        };\n        button.onclick = function () {\n          var _a;\n          if (currentSession === null) {\n            var optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n            (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", _objectSpread(_objectSpread({}, sessionInit), {}, {\n              optionalFeatures: optionalFeatures\n            })).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n      function disableButton() {\n        button.style.display = \"\";\n        button.style.cursor = \"auto\";\n        button.style.left = \"calc(50% - 75px)\";\n        button.style.width = \"150px\";\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = \"VR NOT SUPPORTED\";\n      }\n      function stylizeElement(element) {\n        element.style.position = \"absolute\";\n        element.style.bottom = \"20px\";\n        element.style.padding = \"12px 6px\";\n        element.style.border = \"1px solid #fff\";\n        element.style.borderRadius = \"4px\";\n        element.style.background = \"rgba(0,0,0,0.1)\";\n        element.style.color = \"#fff\";\n        element.style.font = \"normal 13px sans-serif\";\n        element.style.textAlign = \"center\";\n        element.style.opacity = \"0.5\";\n        element.style.outline = \"none\";\n        element.style.zIndex = \"999\";\n      }\n      if (\"xr\" in navigator) {\n        stylizeElement(button);\n        button.id = \"VRButton\";\n        button.style.display = \"none\";\n        navigator.xr.isSessionSupported(\"immersive-vr\").then(function (supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n          if (supported && _VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        });\n        return button;\n      } else {\n        var message = document.createElement(\"a\");\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, \"https:\");\n          message.innerHTML = \"WEBXR NEEDS HTTPS\";\n        } else {\n          message.href = \"https://immersiveweb.dev/\";\n          message.innerHTML = \"WEBXR NOT AVAILABLE\";\n        }\n        message.style.left = \"calc(50% - 90px)\";\n        message.style.width = \"180px\";\n        message.style.textDecoration = \"none\";\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }, {\n    key: \"registerSessionGrantedListener\",\n    value: function registerSessionGrantedListener() {\n      if (typeof navigator !== \"undefined\" && \"xr\" in navigator) {\n        navigator.xr.addEventListener(\"sessiongranted\", function () {\n          _VRButton.xrSessionIsGranted = true;\n        });\n      }\n    }\n  }]);\n  return _VRButton;\n}();\nvar VRButton = _VRButton;\n__publicField(VRButton, \"xrSessionIsGranted\", false);\nVRButton.registerSessionGrantedListener();\nexport { VRButton };\n//# sourceMappingURL=VRButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}