{"ast":null,"code":"import _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from \"three\";\nvar DeviceOrientationControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(DeviceOrientationControls, _EventDispatcher);\n  var _super = _createSuper(DeviceOrientationControls);\n  // radians\n  function DeviceOrientationControls(object) {\n    var _this;\n    _classCallCheck(this, DeviceOrientationControls);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"object\");\n    __publicField(_assertThisInitialized(_this), \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(_assertThisInitialized(_this), \"EPS\", 1e-6);\n    __publicField(_assertThisInitialized(_this), \"enabled\", true);\n    __publicField(_assertThisInitialized(_this), \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n    __publicField(_assertThisInitialized(_this), \"screenOrientation\", 0);\n    __publicField(_assertThisInitialized(_this), \"alphaOffset\", 0);\n    __publicField(_assertThisInitialized(_this), \"onDeviceOrientationChangeEvent\", function (event) {\n      _this.deviceOrientation = event;\n    });\n    __publicField(_assertThisInitialized(_this), \"onScreenOrientationChangeEvent\", function () {\n      _this.screenOrientation = window.orientation || 0;\n    });\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n    __publicField(_assertThisInitialized(_this), \"zee\", new Vector3(0, 0, 1));\n    __publicField(_assertThisInitialized(_this), \"euler\", new Euler());\n    __publicField(_assertThisInitialized(_this), \"q0\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n    // - PI/2 around the x-axis\n    __publicField(_assertThisInitialized(_this), \"setObjectQuaternion\", function (quaternion, alpha, beta, gamma, orient) {\n      _this.euler.set(beta, alpha, -gamma, \"YXZ\");\n      quaternion.setFromEuler(_this.euler);\n      quaternion.multiply(_this.q1);\n      quaternion.multiply(_this.q0.setFromAxisAngle(_this.zee, -orient));\n    });\n    __publicField(_assertThisInitialized(_this), \"connect\", function () {\n      _this.onScreenOrientationChangeEvent();\n      if (window.DeviceOrientationEvent !== void 0 &&\n      // @ts-ignore\n      typeof window.DeviceOrientationEvent.requestPermission === \"function\") {\n        window.DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response == \"granted\") {\n            window.addEventListener(\"orientationchange\", _this.onScreenOrientationChangeEvent);\n            window.addEventListener(\"deviceorientation\", _this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(function (error) {\n          console.error(\"THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:\", error);\n        });\n      } else {\n        window.addEventListener(\"orientationchange\", _this.onScreenOrientationChangeEvent);\n        window.addEventListener(\"deviceorientation\", _this.onDeviceOrientationChangeEvent);\n      }\n      _this.enabled = true;\n    });\n    __publicField(_assertThisInitialized(_this), \"disconnect\", function () {\n      window.removeEventListener(\"orientationchange\", _this.onScreenOrientationChangeEvent);\n      window.removeEventListener(\"deviceorientation\", _this.onDeviceOrientationChangeEvent);\n      _this.enabled = false;\n    });\n    __publicField(_assertThisInitialized(_this), \"lastQuaternion\", new Quaternion());\n    __publicField(_assertThisInitialized(_this), \"update\", function () {\n      if (_this.enabled === false) return;\n      var device = _this.deviceOrientation;\n      if (device) {\n        var alpha = device.alpha ? MathUtils.degToRad(device.alpha) + _this.alphaOffset : 0;\n        var beta = device.beta ? MathUtils.degToRad(device.beta) : 0;\n        var gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0;\n        var orient = _this.screenOrientation ? MathUtils.degToRad(_this.screenOrientation) : 0;\n        _this.setObjectQuaternion(_this.object.quaternion, alpha, beta, gamma, orient);\n        if (8 * (1 - _this.lastQuaternion.dot(_this.object.quaternion)) > _this.EPS) {\n          _this.lastQuaternion.copy(_this.object.quaternion);\n          _this.dispatchEvent(_this.changeEvent);\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"dispose\", function () {\n      return _this.disconnect();\n    });\n    _this.object = object;\n    _this.object.rotation.reorder(\"YXZ\");\n    _this.connect();\n    return _this;\n  }\n  return _createClass(DeviceOrientationControls);\n}(EventDispatcher);\nexport { DeviceOrientationControls };\n//# sourceMappingURL=DeviceOrientationControls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}