{"ast":null,"code":"import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass PackingNode extends TempNode {\n  constructor(scope, node) {\n    super();\n    this.scope = scope;\n    this.node = node;\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  setup() {\n    const {\n      scope,\n      node\n    } = this;\n    let result = null;\n    if (scope === PackingNode.DIRECTION_TO_COLOR) {\n      result = node.mul(0.5).add(0.5);\n    } else if (scope === PackingNode.COLOR_TO_DIRECTION) {\n      result = node.mul(2.0).sub(1);\n    }\n    return result;\n  }\n}\nPackingNode.DIRECTION_TO_COLOR = 'directionToColor';\nPackingNode.COLOR_TO_DIRECTION = 'colorToDirection';\nexport default PackingNode;\nexport const directionToColor = nodeProxy(PackingNode, PackingNode.DIRECTION_TO_COLOR);\nexport const colorToDirection = nodeProxy(PackingNode, PackingNode.COLOR_TO_DIRECTION);\naddNodeElement('directionToColor', directionToColor);\naddNodeElement('colorToDirection', colorToDirection);\naddNodeClass('PackingNode', PackingNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}