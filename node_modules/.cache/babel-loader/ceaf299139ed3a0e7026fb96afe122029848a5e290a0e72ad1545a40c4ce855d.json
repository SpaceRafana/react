{"ast":null,"code":"import { addNodeClass } from '../core/Node.js';\nimport TempNode from '../core/TempNode.js';\nimport { vectorComponents } from '../core/constants.js';\nclass SetNode extends TempNode {\n  constructor(sourceNode, components, targetNode) {\n    super();\n    this.sourceNode = sourceNode;\n    this.components = components;\n    this.targetNode = targetNode;\n  }\n  getNodeType(builder) {\n    return this.sourceNode.getNodeType(builder);\n  }\n  generate(builder) {\n    const {\n      sourceNode,\n      components,\n      targetNode\n    } = this;\n    const sourceType = this.getNodeType(builder);\n    const targetType = builder.getTypeFromLength(components.length);\n    const targetSnippet = targetNode.build(builder, targetType);\n    const sourceSnippet = sourceNode.build(builder, sourceType);\n    const length = builder.getTypeLength(sourceType);\n    const snippetValues = [];\n    for (let i = 0; i < length; i++) {\n      const component = vectorComponents[i];\n      if (component === components[0]) {\n        snippetValues.push(targetSnippet);\n        i += components.length - 1;\n      } else {\n        snippetValues.push(sourceSnippet + '.' + component);\n      }\n    }\n    return `${builder.getType(sourceType)}( ${snippetValues.join(', ')} )`;\n  }\n}\nexport default SetNode;\naddNodeClass('SetNode', SetNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}