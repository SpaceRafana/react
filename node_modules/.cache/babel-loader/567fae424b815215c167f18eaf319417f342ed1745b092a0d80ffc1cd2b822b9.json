{"ast":null,"code":"import _toConsumableArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar isPromise = function isPromise(promise) {\n  return typeof promise === 'object' && typeof promise.then === 'function';\n};\nvar globalCache = [];\nfunction shallowEqualArrays(arrA, arrB) {\n  var equal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {\n    return a === b;\n  };\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  var len = arrA.length;\n  if (arrB.length !== len) return false;\n  for (var i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n  return true;\n}\nfunction query(fn) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var preload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // If no keys were given, the function is the key\n  if (keys === null) keys = [fn];\n  for (var _i = 0, _globalCache = globalCache; _i < _globalCache.length; _i++) {\n    var _entry = _globalCache[_i];\n    // Find a match\n    if (shallowEqualArrays(keys, _entry.keys, _entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(_entry, 'error')) throw _entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(_entry, 'response')) {\n        if (config.lifespan && config.lifespan > 0) {\n          if (_entry.timeout) clearTimeout(_entry.timeout);\n          _entry.timeout = setTimeout(_entry.remove, config.lifespan);\n        }\n        return _entry.response;\n      } // If the promise is still unresolved, throw\n\n      if (!preload) throw _entry.promise;\n    }\n  } // The request is new or has changed.\n\n  var entry = {\n    keys: keys,\n    equal: config.equal,\n    remove: function remove() {\n      var index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    },\n    promise:\n    // Execute the promise\n    (isPromise(fn) ? fn : fn.apply(void 0, _toConsumableArray(keys)) // When it resolves, store its value\n    ).then(function (response) {\n      entry.response = response; // Remove the entry in time if a lifespan was given\n\n      if (config.lifespan && config.lifespan > 0) {\n        entry.timeout = setTimeout(entry.remove, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(function (error) {\n      return entry.error = error;\n    })\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\nvar suspend = function suspend(fn, keys, config) {\n  return query(fn, keys, false, config);\n};\nvar preload = function preload(fn, keys, config) {\n  return void query(fn, keys, true, config);\n};\nvar peek = function peek(keys) {\n  var _globalCache$find;\n  return (_globalCache$find = globalCache.find(function (entry) {\n    return shallowEqualArrays(keys, entry.keys, entry.equal);\n  })) == null ? void 0 : _globalCache$find.response;\n};\nvar clear = function clear(keys) {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    var entry = globalCache.find(function (entry) {\n      return shallowEqualArrays(keys, entry.keys, entry.equal);\n    });\n    if (entry) entry.remove();\n  }\n};\nexport { clear, peek, preload, suspend };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}