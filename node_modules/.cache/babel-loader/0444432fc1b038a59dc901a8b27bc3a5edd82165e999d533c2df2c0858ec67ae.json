{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar _SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSAOPass, _Pass);\n  var _super = _createSuper(_SSAOPass);\n  function _SSAOPass(scene, camera, width, height) {\n    var _this;\n    _classCallCheck(this, _SSAOPass);\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 5e-3;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = /* @__PURE__ */new Map();\n    _this.generateSampleKernel();\n    _this.generateRandomKernelRotations();\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    });\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms[\"tNoise\"].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms[\"kernel\"].value = _this.kernel;\n    _this.ssaoMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssaoMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n    _this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssaoRenderTarget.texture;\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(_SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      this.restoreVisibility();\n      this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n      this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      switch (this.output) {\n        case _SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSAOPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n        height = 4;\n      if (SimplexNoise === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n      }\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n  return _SSAOPass;\n}(Pass);\nvar SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport { SSAOPass };\n//# sourceMappingURL=SSAOPass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}