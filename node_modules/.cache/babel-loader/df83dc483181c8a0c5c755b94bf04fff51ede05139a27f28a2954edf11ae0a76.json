{"ast":null,"code":"import _slicedToArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"renderPriority\", \"zoom\", \"segments\", \"children\", \"resolution\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { RenderCubeTexture } from './RenderCubeTexture.js';\nfunction Fisheye(_ref) {\n  var _ref$renderPriority = _ref.renderPriority,\n    renderPriority = _ref$renderPriority === void 0 ? 1 : _ref$renderPriority,\n    _ref$zoom = _ref.zoom,\n    zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n    _ref$segments = _ref.segments,\n    segments = _ref$segments === void 0 ? 64 : _ref$segments,\n    children = _ref.children,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 896 : _ref$resolution,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var sphere = React.useRef(null);\n  var cubeApi = React.useRef(null);\n\n  // This isn't more than a simple sphere and a fixed orthographc camera\n  // pointing at it. A virtual scene is portalled into the environment map\n  // of its material. The cube-camera filming that scene is being synced to\n  // the portals default camera with the <UpdateCubeCamera> component.\n\n  var _useThree = useThree(function (state) {\n      return state.size;\n    }),\n    width = _useThree.width,\n    height = _useThree.height;\n  var _React$useState = React.useState(function () {\n      return new THREE.OrthographicCamera();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    orthoC = _React$useState2[0];\n  React.useLayoutEffect(function () {\n    orthoC.position.set(0, 0, 100);\n    orthoC.zoom = 100;\n    orthoC.left = width / -2;\n    orthoC.right = width / 2;\n    orthoC.top = height / 2;\n    orthoC.bottom = height / -2;\n    orthoC.updateProjectionMatrix();\n  }, [width, height]);\n  var radius = Math.sqrt(width * width + height * height) / 100 * (0.5 + zoom / 2);\n  var normal = new THREE.Vector3();\n  var sph = new THREE.Sphere(new THREE.Vector3(), radius);\n  var normalMatrix = new THREE.Matrix3();\n  var compute = React.useCallback(function (event, state, prev) {\n    // Raycast from the render camera to the sphere and get the surface normal\n    // of the point hit in world space of the sphere scene\n    // We have to set the raycaster using the orthocam and pointer\n    // to perform sphere interscetions.\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, orthoC);\n    if (!state.raycaster.ray.intersectSphere(sph, normal)) return;else normal.normalize();\n    // Get the matrix for transforming normals into world space\n    normalMatrix.getNormalMatrix(cubeApi.current.camera.matrixWorld);\n    // Get the ray\n    cubeApi.current.camera.getWorldPosition(state.raycaster.ray.origin);\n    state.raycaster.ray.direction.set(0, 0, 1).reflect(normal);\n    state.raycaster.ray.direction.x *= -1; // flip across X to accommodate the \"flip\" of the env map\n    state.raycaster.ray.direction.applyNormalMatrix(normalMatrix).multiplyScalar(-1);\n    return undefined;\n  }, []);\n  useFrame(function (state) {\n    // Take over rendering\n    if (renderPriority) state.gl.render(sphere.current, orthoC);\n  }, renderPriority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: sphere\n  }, props, {\n    scale: radius\n  }), /*#__PURE__*/React.createElement(\"sphereGeometry\", {\n    args: [1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", null, /*#__PURE__*/React.createElement(RenderCubeTexture, {\n    compute: compute,\n    attach: \"envMap\",\n    flip: true,\n    resolution: resolution,\n    ref: cubeApi\n  }, children, /*#__PURE__*/React.createElement(UpdateCubeCamera, {\n    api: cubeApi\n  })))));\n}\nfunction UpdateCubeCamera(_ref2) {\n  var api = _ref2.api;\n  var t = new THREE.Vector3();\n  var r = new THREE.Quaternion();\n  var s = new THREE.Vector3();\n  var e = new THREE.Euler(0, Math.PI, 0);\n  useFrame(function (state) {\n    // Read out the cameras whereabouts, state.camera is the one *within* the portal\n    state.camera.matrixWorld.decompose(t, r, s);\n    // Apply its position and rotation, flip the Y axis\n    api.current.camera.position.copy(t);\n    api.current.camera.quaternion.setFromEuler(e).premultiply(r);\n  });\n  return null;\n}\nexport { Fisheye };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}