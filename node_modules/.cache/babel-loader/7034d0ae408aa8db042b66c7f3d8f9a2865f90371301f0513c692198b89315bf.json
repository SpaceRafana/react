{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { buffer } from './BufferNode.js';\nimport { normalLocal } from './NormalNode.js';\nimport { positionLocal } from './PositionNode.js';\nimport { tangentLocal } from './TangentNode.js';\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.OBJECT;\n\n    //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(skinnedMesh.bindMatrix, 'mat4');\n    this.bindMatrixInverseNode = uniform(skinnedMesh.bindMatrixInverse, 'mat4');\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n  setup(builder) {\n    const {\n      skinIndexNode,\n      skinWeightNode,\n      bindMatrixNode,\n      bindMatrixInverseNode,\n      boneMatricesNode\n    } = this;\n    const boneMatX = boneMatricesNode.element(skinIndexNode.x);\n    const boneMatY = boneMatricesNode.element(skinIndexNode.y);\n    const boneMatZ = boneMatricesNode.element(skinIndexNode.z);\n    const boneMatW = boneMatricesNode.element(skinIndexNode.w);\n\n    // POSITION\n\n    const skinVertex = bindMatrixNode.mul(positionLocal);\n    const skinned = add(boneMatX.mul(skinWeightNode.x).mul(skinVertex), boneMatY.mul(skinWeightNode.y).mul(skinVertex), boneMatZ.mul(skinWeightNode.z).mul(skinVertex), boneMatW.mul(skinWeightNode.w).mul(skinVertex));\n    const skinPosition = bindMatrixInverseNode.mul(skinned).xyz;\n\n    // NORMAL\n\n    let skinMatrix = add(skinWeightNode.x.mul(boneMatX), skinWeightNode.y.mul(boneMatY), skinWeightNode.z.mul(boneMatZ), skinWeightNode.w.mul(boneMatW));\n    skinMatrix = bindMatrixInverseNode.mul(skinMatrix).mul(bindMatrixNode);\n    const skinNormal = skinMatrix.transformDirection(normalLocal).xyz;\n\n    // ASSIGNS\n\n    builder.stack.assign(positionLocal, skinPosition);\n    builder.stack.assign(normalLocal, skinNormal);\n    if (builder.hasGeometryAttribute('tangent')) {\n      builder.stack.assign(tangentLocal, skinNormal);\n    }\n  }\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n}\nexport default SkinningNode;\nexport const skinning = nodeProxy(SkinningNode);\naddNodeClass('SkinningNode', SkinningNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}