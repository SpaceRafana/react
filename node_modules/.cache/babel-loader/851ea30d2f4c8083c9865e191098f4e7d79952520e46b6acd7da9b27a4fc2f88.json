{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nvar TOUCH_RADIUS = 0.01;\nvar POINTING_JOINT = \"index-finger-tip\";\nvar OculusHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(OculusHandModel, _Object3D);\n  var _super = _createSuper(OculusHandModel);\n  function OculusHandModel(controller, leftModelPath, rightModelPath) {\n    var _this;\n    _classCallCheck(this, OculusHandModel);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"controller\");\n    __publicField(_assertThisInitialized(_this), \"motionController\");\n    __publicField(_assertThisInitialized(_this), \"envMap\");\n    __publicField(_assertThisInitialized(_this), \"mesh\");\n    __publicField(_assertThisInitialized(_this), \"xrInputSource\");\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    _this.xrInputSource = null;\n    controller.addEventListener(\"connected\", function (event) {\n      var xrInputSource = event.data;\n      if (xrInputSource.hand && !_this.motionController) {\n        _this.xrInputSource = xrInputSource;\n        _this.motionController = new XRHandMeshModel(_assertThisInitialized(_this), controller, void 0, xrInputSource.handedness, xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener(\"disconnected\", function () {\n      _this.dispose();\n    });\n    return _this;\n  }\n  _createClass(OculusHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition() {\n      var indexFingerTip = this.controller.joints[POINTING_JOINT];\n      if (indexFingerTip) {\n        return indexFingerTip.position;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"intersectBoxObject\",\n    value: function intersectBoxObject(boxObject) {\n      var pointerPosition = this.getPointerPosition();\n      if (pointerPosition) {\n        var indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n        var box = new Box3().setFromObject(boxObject);\n        return indexSphere.intersectsBox(box);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(button) {\n      if (this.intersectBoxObject(button)) {\n        button.onPress();\n      } else {\n        button.onClear();\n      }\n      if (button.isPressed()) {\n        button.whilePressed();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clear();\n      this.motionController = null;\n    }\n  }]);\n  return OculusHandModel;\n}(Object3D);\nexport { OculusHandModel };\n//# sourceMappingURL=OculusHandModel.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}