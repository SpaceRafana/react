{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { texture } from './TextureNode.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nclass ReferenceNode extends Node {\n  constructor(property, uniformType, object = null) {\n    super();\n    this.property = property;\n    this.uniformType = uniformType;\n    this.object = object;\n    this.reference = null;\n    this.node = null;\n    this.updateType = NodeUpdateType.OBJECT;\n    this.setNodeType(uniformType);\n  }\n  updateReference(frame) {\n    this.reference = this.object !== null ? this.object : frame.object;\n    return this.reference;\n  }\n  setNodeType(uniformType) {\n    let node = null;\n    if (uniformType === 'texture') {\n      node = texture(null);\n    } else {\n      node = uniform(uniformType);\n    }\n    this.node = node;\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  update( /*frame*/\n  ) {\n    this.node.value = this.reference[this.property];\n  }\n  setup( /*builder*/\n  ) {\n    return this.node;\n  }\n}\nexport default ReferenceNode;\nexport const reference = (name, type, object) => nodeObject(new ReferenceNode(name, type, object));\naddNodeClass('ReferenceNode', ReferenceNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}