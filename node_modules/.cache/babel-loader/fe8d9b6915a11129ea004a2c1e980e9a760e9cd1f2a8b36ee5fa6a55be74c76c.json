{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { NodeShaderStage } from './constants.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass VaryingNode extends Node {\n  constructor(node, name = null) {\n    super();\n    this.node = node;\n    this.name = name;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  getNodeType(builder) {\n    // VaryingNode is auto type\n\n    return this.node.getNodeType(builder);\n  }\n  generate(builder) {\n    const {\n      name,\n      node\n    } = this;\n    const type = this.getNodeType(builder);\n    const nodeVarying = builder.getVaryingFromNode(this, type);\n\n    // this property can be used to check if the varying can be optimized for a var\n    nodeVarying.needsInterpolation || (nodeVarying.needsInterpolation = builder.shaderStage === 'fragment');\n    if (name !== null) {\n      nodeVarying.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeVarying, NodeShaderStage.VERTEX);\n\n    // force node run in vertex stage\n    builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, node, type, propertyName);\n    return builder.getPropertyName(nodeVarying);\n  }\n}\nexport default VaryingNode;\nexport const varying = nodeProxy(VaryingNode);\naddNodeElement('varying', varying);\naddNodeClass('VaryingNode', VaryingNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}