{"ast":null,"code":"import _regeneratorRuntime from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar ARButton = /*#__PURE__*/function () {\n  function ARButton() {\n    _classCallCheck(this, ARButton);\n  }\n  _createClass(ARButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer) {\n      var sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var button = document.createElement(\"button\");\n      function showStartAR() {\n        if (sessionInit.domOverlay === void 0) {\n          var overlay = document.createElement(\"div\");\n          overlay.style.display = \"none\";\n          document.body.appendChild(overlay);\n          var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n          svg.setAttribute(\"width\", \"38px\");\n          svg.setAttribute(\"height\", \"38px\");\n          svg.style.position = \"absolute\";\n          svg.style.right = \"20px\";\n          svg.style.top = \"20px\";\n          svg.addEventListener(\"click\", function () {\n            currentSession == null ? void 0 : currentSession.end();\n          });\n          overlay.appendChild(svg);\n          var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n          path.setAttribute(\"d\", \"M 12,12 L 28,28 M 28,12 12,28\");\n          path.setAttribute(\"stroke\", \"#fff\");\n          path.setAttribute(\"stroke-width\", \"2px\");\n          svg.appendChild(path);\n          if (sessionInit.optionalFeatures === void 0) {\n            sessionInit.optionalFeatures = [];\n          }\n          sessionInit.optionalFeatures.push(\"dom-overlay\");\n          sessionInit.domOverlay = {\n            root: overlay\n          };\n        }\n        var currentSession = null;\n        function onSessionStarted(_x) {\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function _onSessionStarted() {\n          _onSessionStarted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  session.addEventListener(\"end\", onSessionEnded);\n                  renderer.xr.setReferenceSpaceType(\"local\");\n                  _context.next = 4;\n                  return renderer.xr.setSession(session);\n                case 4:\n                  button.textContent = \"STOP AR\";\n                  sessionInit.domOverlay.root.style.display = \"\";\n                  currentSession = session;\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return _onSessionStarted.apply(this, arguments);\n        }\n        function onSessionEnded() {\n          currentSession.removeEventListener(\"end\", onSessionEnded);\n          button.textContent = \"START AR\";\n          sessionInit.domOverlay.root.style.display = \"none\";\n          currentSession = null;\n        }\n        button.style.display = \"\";\n        button.style.cursor = \"pointer\";\n        button.style.left = \"calc(50% - 50px)\";\n        button.style.width = \"100px\";\n        button.textContent = \"START AR\";\n        button.onmouseenter = function () {\n          button.style.opacity = \"1.0\";\n        };\n        button.onmouseleave = function () {\n          button.style.opacity = \"0.5\";\n        };\n        button.onclick = function () {\n          if (currentSession === null) {\n            navigator.xr.requestSession(\"immersive-ar\", sessionInit).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n      function disableButton() {\n        button.style.display = \"\";\n        button.style.cursor = \"auto\";\n        button.style.left = \"calc(50% - 75px)\";\n        button.style.width = \"150px\";\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n      function showARNotSupported() {\n        disableButton();\n        button.textContent = \"AR NOT SUPPORTED\";\n      }\n      function stylizeElement(element) {\n        element.style.position = \"absolute\";\n        element.style.bottom = \"20px\";\n        element.style.padding = \"12px 6px\";\n        element.style.border = \"1px solid #fff\";\n        element.style.borderRadius = \"4px\";\n        element.style.background = \"rgba(0,0,0,0.1)\";\n        element.style.color = \"#fff\";\n        element.style.font = \"normal 13px sans-serif\";\n        element.style.textAlign = \"center\";\n        element.style.opacity = \"0.5\";\n        element.style.outline = \"none\";\n        element.style.zIndex = \"999\";\n      }\n      if (\"xr\" in navigator) {\n        button.id = \"ARButton\";\n        button.style.display = \"none\";\n        stylizeElement(button);\n        navigator.xr.isSessionSupported(\"immersive-ar\").then(function (supported) {\n          supported ? showStartAR() : showARNotSupported();\n        }).catch(showARNotSupported);\n        return button;\n      } else {\n        var message = document.createElement(\"a\");\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, \"https:\");\n          message.innerHTML = \"WEBXR NEEDS HTTPS\";\n        } else {\n          message.href = \"https://immersiveweb.dev/\";\n          message.innerHTML = \"WEBXR NOT AVAILABLE\";\n        }\n        message.style.left = \"calc(50% - 90px)\";\n        message.style.width = \"180px\";\n        message.style.textDecoration = \"none\";\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }]);\n  return ARButton;\n}();\nexport { ARButton };\n//# sourceMappingURL=ARButton.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}