{"ast":null,"code":"import ContextNode from '../core/ContextNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy, float, vec3 } from '../shadernode/ShaderNode.js';\nclass LightingContextNode extends ContextNode {\n  constructor(node, lightingModel = null, backdropNode = null, backdropAlphaNode = null) {\n    super(node);\n    this.lightingModel = lightingModel;\n    this.backdropNode = backdropNode;\n    this.backdropAlphaNode = backdropAlphaNode;\n  }\n  getNodeType( /*builder*/\n  ) {\n    return 'vec3';\n  }\n  setup(builder) {\n    const {\n      lightingModel,\n      backdropNode,\n      backdropAlphaNode\n    } = this;\n    const context = this.context = {}; // reset context\n    const properties = builder.getNodeProperties(this);\n    const directDiffuse = vec3().temp(),\n      directSpecular = vec3().temp(),\n      indirectDiffuse = vec3().temp(),\n      indirectSpecular = vec3().temp();\n    let totalDiffuse = add(directDiffuse, indirectDiffuse);\n    if (backdropNode !== null) {\n      totalDiffuse = vec3(backdropAlphaNode !== null ? mix(totalDiffuse, backdropNode, backdropAlphaNode) : backdropNode);\n    }\n    const totalSpecular = add(directSpecular, indirectSpecular);\n    const total = add(totalDiffuse, totalSpecular).temp();\n    const reflectedLight = {\n      directDiffuse,\n      directSpecular,\n      indirectDiffuse,\n      indirectSpecular,\n      total\n    };\n    const lighting = {\n      radiance: vec3().temp(),\n      irradiance: vec3().temp(),\n      iblIrradiance: vec3().temp(),\n      ambientOcclusion: float(1).temp()\n    };\n    context.reflectedLight = reflectedLight;\n    context.lightingModel = lightingModel || context.lightingModel;\n    Object.assign(properties, reflectedLight, lighting);\n    Object.assign(context, lighting);\n    if (lightingModel) {\n      lightingModel.init(context, builder.stack, builder);\n      lightingModel.indirectDiffuse(context, builder.stack, builder);\n      lightingModel.indirectSpecular(context, builder.stack, builder);\n      lightingModel.ambientOcclusion(context, builder.stack, builder);\n    }\n    return super.setup(builder);\n  }\n  generate(builder) {\n    const {\n      context\n    } = this;\n    const type = this.getNodeType(builder);\n    super.generate(builder, type);\n    return context.reflectedLight.total.build(builder, type);\n  }\n}\nexport default LightingContextNode;\nexport const lightingContext = nodeProxy(LightingContextNode);\naddNodeElement('lightingContext', lightingContext);\naddNodeClass('LightingContextNode', LightingContextNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}