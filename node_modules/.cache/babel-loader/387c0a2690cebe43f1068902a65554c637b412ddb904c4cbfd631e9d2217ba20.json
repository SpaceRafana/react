{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Texture, LinearFilter, ClampToEdgeWrapping, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from \"three\";\nvar VolumeSlice = /*#__PURE__*/function () {\n  function VolumeSlice(volume, index, axis) {\n    _classCallCheck(this, VolumeSlice);\n    var slice = this;\n    this.volume = volume;\n    index = index || 0;\n    Object.defineProperty(this, \"index\", {\n      get: function get() {\n        return index;\n      },\n      set: function set(value) {\n        index = value;\n        slice.geometryNeedsUpdate = true;\n        return index;\n      }\n    });\n    this.axis = axis || \"z\";\n    this.canvas = document.createElement(\"canvas\");\n    this.canvasBuffer = document.createElement(\"canvas\");\n    this.updateGeometry();\n    var canvasMap = new Texture(this.canvas);\n    canvasMap.minFilter = LinearFilter;\n    canvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n    if (\"colorSpace\" in canvasMap) canvasMap.colorSpace = \"srgb\";else canvasMap.encoding = 3001;\n    var material = new MeshBasicMaterial({\n      map: canvasMap,\n      side: DoubleSide,\n      transparent: true\n    });\n    this.mesh = new Mesh(this.geometry, material);\n    this.mesh.matrixAutoUpdate = false;\n    this.geometryNeedsUpdate = true;\n    this.repaint();\n  }\n  /**\n   * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n   * @memberof VolumeSlice\n   */\n  _createClass(VolumeSlice, [{\n    key: \"repaint\",\n    value: function repaint() {\n      if (this.geometryNeedsUpdate) {\n        this.updateGeometry();\n      }\n      var iLength = this.iLength,\n        jLength = this.jLength,\n        sliceAccess = this.sliceAccess,\n        volume = this.volume,\n        canvas = this.canvasBuffer,\n        ctx = this.ctxBuffer;\n      var imgData = ctx.getImageData(0, 0, iLength, jLength);\n      var data = imgData.data;\n      var volumeData = volume.data;\n      var upperThreshold = volume.upperThreshold;\n      var lowerThreshold = volume.lowerThreshold;\n      var windowLow = volume.windowLow;\n      var windowHigh = volume.windowHigh;\n      var pixelCount = 0;\n      if (volume.dataType === \"label\") {\n        for (var j = 0; j < jLength; j++) {\n          for (var i = 0; i < iLength; i++) {\n            var label = volumeData[sliceAccess(i, j)];\n            label = label >= this.colorMap.length ? label % this.colorMap.length + 1 : label;\n            var color = this.colorMap[label];\n            data[4 * pixelCount] = color >> 24 & 255;\n            data[4 * pixelCount + 1] = color >> 16 & 255;\n            data[4 * pixelCount + 2] = color >> 8 & 255;\n            data[4 * pixelCount + 3] = color & 255;\n            pixelCount++;\n          }\n        }\n      } else {\n        for (var _j = 0; _j < jLength; _j++) {\n          for (var _i = 0; _i < iLength; _i++) {\n            var value = volumeData[sliceAccess(_i, _j)];\n            var alpha = 255;\n            alpha = upperThreshold >= value ? lowerThreshold <= value ? alpha : 0 : 0;\n            value = Math.floor(255 * (value - windowLow) / (windowHigh - windowLow));\n            value = value > 255 ? 255 : value < 0 ? 0 : value | 0;\n            data[4 * pixelCount] = value;\n            data[4 * pixelCount + 1] = value;\n            data[4 * pixelCount + 2] = value;\n            data[4 * pixelCount + 3] = alpha;\n            pixelCount++;\n          }\n        }\n      }\n      ctx.putImageData(imgData, 0, 0);\n      this.ctx.drawImage(canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height);\n      this.mesh.material.map.needsUpdate = true;\n    }\n    /**\n     * @member {Function} Refresh the geometry according to axis and index\n     * @see Volume.extractPerpendicularPlane\n     * @memberof VolumeSlice\n     */\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry() {\n      var extracted = this.volume.extractPerpendicularPlane(this.axis, this.index);\n      this.sliceAccess = extracted.sliceAccess;\n      this.jLength = extracted.jLength;\n      this.iLength = extracted.iLength;\n      this.matrix = extracted.matrix;\n      this.canvas.width = extracted.planeWidth;\n      this.canvas.height = extracted.planeHeight;\n      this.canvasBuffer.width = this.iLength;\n      this.canvasBuffer.height = this.jLength;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.ctxBuffer = this.canvasBuffer.getContext(\"2d\");\n      if (this.geometry) this.geometry.dispose();\n      this.geometry = new PlaneGeometry(extracted.planeWidth, extracted.planeHeight);\n      if (this.mesh) {\n        this.mesh.geometry = this.geometry;\n        this.mesh.matrix.identity();\n        this.mesh.applyMatrix4(this.matrix);\n      }\n      this.geometryNeedsUpdate = false;\n    }\n  }]);\n  return VolumeSlice;\n}();\nexport { VolumeSlice };\n//# sourceMappingURL=VolumeSlice.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}