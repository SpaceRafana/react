{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3 } from \"three\";\nvar _v1 = new Vector3();\nvar _v2 = new Vector3();\nvar _v3 = new Vector3();\nvar EPS = 1e-10;\nvar Capsule = /*#__PURE__*/function () {\n  function Capsule() {\n    var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 0);\n    var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 1, 0);\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    _classCallCheck(this, Capsule);\n    this.start = start;\n    this.end = end;\n    this.radius = radius;\n  }\n  _createClass(Capsule, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Capsule(this.start.clone(), this.end.clone(), this.radius);\n    }\n  }, {\n    key: \"set\",\n    value: function set(start, end, radius) {\n      this.start.copy(start);\n      this.end.copy(end);\n      this.radius = radius;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(capsule) {\n      this.start.copy(capsule.start);\n      this.end.copy(capsule.end);\n      this.radius = capsule.radius;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(target) {\n      return target.copy(this.end).add(this.start).multiplyScalar(0.5);\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(v) {\n      this.start.add(v);\n      this.end.add(v);\n    }\n  }, {\n    key: \"checkAABBAxis\",\n    value: function checkAABBAxis(p1x, p1y, p2x, p2y, minx, maxx, miny, maxy, radius) {\n      return (minx - p1x < radius || minx - p2x < radius) && (p1x - maxx < radius || p2x - maxx < radius) && (miny - p1y < radius || miny - p2y < radius) && (p1y - maxy < radius || p2y - maxy < radius);\n    }\n  }, {\n    key: \"intersectsBox\",\n    value: function intersectsBox(box) {\n      return this.checkAABBAxis(this.start.x, this.start.y, this.end.x, this.end.y, box.min.x, box.max.x, box.min.y, box.max.y, this.radius) && this.checkAABBAxis(this.start.x, this.start.z, this.end.x, this.end.z, box.min.x, box.max.x, box.min.z, box.max.z, this.radius) && this.checkAABBAxis(this.start.y, this.start.z, this.end.y, this.end.z, box.min.y, box.max.y, box.min.z, box.max.z, this.radius);\n    }\n  }, {\n    key: \"lineLineMinimumPoints\",\n    value: function lineLineMinimumPoints(line1, line2) {\n      var r = _v1.copy(line1.end).sub(line1.start);\n      var s = _v2.copy(line2.end).sub(line2.start);\n      var w = _v3.copy(line2.start).sub(line1.start);\n      var a = r.dot(s),\n        b = r.dot(r),\n        c = s.dot(s),\n        d = s.dot(w),\n        e = r.dot(w);\n      var t1, t2;\n      var divisor = b * c - a * a;\n      if (Math.abs(divisor) < EPS) {\n        var d1 = -d / c;\n        var d2 = (a - d) / c;\n        if (Math.abs(d1 - 0.5) < Math.abs(d2 - 0.5)) {\n          t1 = 0;\n          t2 = d1;\n        } else {\n          t1 = 1;\n          t2 = d2;\n        }\n      } else {\n        t1 = (d * a + e * c) / divisor;\n        t2 = (t1 * a - d) / c;\n      }\n      t2 = Math.max(0, Math.min(1, t2));\n      t1 = Math.max(0, Math.min(1, t1));\n      var point1 = r.multiplyScalar(t1).add(line1.start);\n      var point2 = s.multiplyScalar(t2).add(line2.start);\n      return [point1, point2];\n    }\n  }]);\n  return Capsule;\n}();\nexport { Capsule };\n//# sourceMappingURL=Capsule.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}