{"ast":null,"code":"import { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness } from '../core/PropertyNode.js';\nimport { materialClearcoatNormal } from '../accessors/ExtendedMaterialNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness } from '../accessors/MaterialNode.js';\nimport { float, vec3 } from '../shadernode/ShaderNode.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { MeshPhysicalMaterial } from 'three';\nconst defaultValues = new MeshPhysicalMaterial();\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshPhysicalNodeMaterial = true;\n    this.clearcoatNode = null;\n    this.clearcoatRoughnessNode = null;\n    this.clearcoatNormalNode = null;\n    this.sheenNode = null;\n    this.sheenRoughnessNode = null;\n    this.iridescenceNode = null;\n    this.iridescenceIORNode = null;\n    this.iridescenceThicknessNode = null;\n    this.specularIntensityNode = null;\n    this.specularColorNode = null;\n    this.transmissionNode = null;\n    this.thicknessNode = null;\n    this.attenuationDistanceNode = null;\n    this.attenuationColorNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  setupLightingModel( /*builder*/\n  ) {\n    return new PhysicalLightingModel(); // @TODO: Optimize shader using parameters.\n  }\n\n  setupVariants(builder) {\n    super.setupVariants(builder);\n    const {\n      stack\n    } = builder;\n\n    // CLEARCOAT\n\n    const clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;\n    const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;\n    stack.assign(clearcoat, clearcoatNode);\n    stack.assign(clearcoatRoughness, clearcoatRoughnessNode);\n\n    // SHEEN\n\n    const sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;\n    const sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;\n    stack.assign(sheen, sheenNode);\n    stack.assign(sheenRoughness, sheenRoughnessNode);\n\n    // IRIDESCENCE\n\n    const iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;\n    const iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;\n    const iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;\n    stack.assign(iridescence, iridescenceNode);\n    stack.assign(iridescenceIOR, iridescenceIORNode);\n    stack.assign(iridescenceThickness, iridescenceThicknessNode);\n  }\n  setupNormal(builder) {\n    super.setupNormal(builder);\n\n    // CLEARCOAT NORMAL\n\n    const clearcoatNormalNode = this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;\n    builder.stack.assign(transformedClearcoatNormalView, clearcoatNormalNode);\n  }\n  copy(source) {\n    this.clearcoatNode = source.clearcoatNode;\n    this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n    this.clearcoatNormalNode = source.clearcoatNormalNode;\n    this.sheenNode = source.sheenNode;\n    this.sheenRoughnessNode = source.sheenRoughnessNode;\n    this.iridescenceNode = source.iridescenceNode;\n    this.iridescenceIORNode = source.iridescenceIORNode;\n    this.iridescenceThicknessNode = source.iridescenceThicknessNode;\n    this.specularIntensityNode = source.specularIntensityNode;\n    this.specularColorNode = source.specularColorNode;\n    this.transmissionNode = source.transmissionNode;\n    this.thicknessNode = source.thicknessNode;\n    this.attenuationDistanceNode = source.attenuationDistanceNode;\n    this.attenuationColorNode = source.attenuationColorNode;\n    return super.copy(source);\n  }\n}\nexport default MeshPhysicalNodeMaterial;\naddNodeMaterial('MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}