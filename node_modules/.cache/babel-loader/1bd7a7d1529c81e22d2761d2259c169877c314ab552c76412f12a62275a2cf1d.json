{"ast":null,"code":"import { Color, Matrix3, Matrix4, Vector2, Vector3, Vector4 } from 'three';\nexport function getCacheKey(object) {\n  let cacheKey = '{';\n  if (object.isNode === true) {\n    cacheKey += `uuid:\"${object.uuid}\"`;\n  }\n  for (const {\n    property,\n    index,\n    childNode\n  } of getNodeChildren(object)) {\n    // @TODO: Think about implement NodeArray and NodeObject.\n\n    let childCacheKey = getCacheKey(childNode);\n    if (!childCacheKey.includes(',')) childCacheKey = childCacheKey.slice(childCacheKey.indexOf('\"'), childCacheKey.indexOf('}'));\n    cacheKey += `,${property}${index !== undefined ? '/' + index : ''}:${childCacheKey}`;\n  }\n  cacheKey += '}';\n  return cacheKey;\n}\nexport function* getNodeChildren(node, toJSON = false) {\n  for (const property in node) {\n    // Ignore private properties.\n    if (property.startsWith('_') === true) continue;\n    const object = node[property];\n    if (Array.isArray(object) === true) {\n      for (let i = 0; i < object.length; i++) {\n        const child = object[i];\n        if (child && (child.isNode === true || toJSON && typeof child.toJSON === 'function')) {\n          yield {\n            property,\n            index: i,\n            childNode: child\n          };\n        }\n      }\n    } else if (object && object.isNode === true) {\n      yield {\n        property,\n        childNode: object\n      };\n    } else if (typeof object === 'object') {\n      for (const subProperty in object) {\n        const child = object[subProperty];\n        if (child && (child.isNode === true || toJSON && typeof child.toJSON === 'function')) {\n          yield {\n            property,\n            index: subProperty,\n            childNode: child\n          };\n        }\n      }\n    }\n  }\n}\nexport function getValueType(value) {\n  if (value === undefined || value === null) return null;\n  const typeOf = typeof value;\n  if (value.isNode === true) {\n    return 'node';\n  } else if (typeOf === 'number') {\n    return 'float';\n  } else if (typeOf === 'boolean') {\n    return 'bool';\n  } else if (typeOf === 'string') {\n    return 'string';\n  } else if (typeOf === 'function') {\n    return 'shader';\n  } else if (value.isVector2 === true) {\n    return 'vec2';\n  } else if (value.isVector3 === true) {\n    return 'vec3';\n  } else if (value.isVector4 === true) {\n    return 'vec4';\n  } else if (value.isMatrix3 === true) {\n    return 'mat3';\n  } else if (value.isMatrix4 === true) {\n    return 'mat4';\n  } else if (value.isColor === true) {\n    return 'color';\n  } else if (value instanceof ArrayBuffer) {\n    return 'ArrayBuffer';\n  }\n  return null;\n}\nexport function getValueFromType(type, ...params) {\n  const last4 = type ? type.slice(-4) : undefined;\n  if ((last4 === 'vec2' || last4 === 'vec3' || last4 === 'vec4') && params.length === 1) {\n    // ensure same behaviour as in NodeBuilder.format()\n\n    params = last4 === 'vec2' ? [params[0], params[0]] : [params[0], params[0], params[0]];\n  }\n  if (type === 'color') {\n    return new Color(...params);\n  } else if (last4 === 'vec2') {\n    return new Vector2(...params);\n  } else if (last4 === 'vec3') {\n    return new Vector3(...params);\n  } else if (last4 === 'vec4') {\n    return new Vector4(...params);\n  } else if (last4 === 'mat3') {\n    return new Matrix3(...params);\n  } else if (last4 === 'mat4') {\n    return new Matrix4(...params);\n  } else if (type === 'bool') {\n    return params[0] || false;\n  } else if (type === 'float' || type === 'int' || type === 'uint') {\n    return params[0] || 0;\n  } else if (type === 'string') {\n    return params[0] || '';\n  } else if (type === 'ArrayBuffer') {\n    return base64ToArrayBuffer(params[0]);\n  }\n  return null;\n}\nexport function arrayBufferToBase64(arrayBuffer) {\n  let chars = '';\n  const array = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < array.length; i++) {\n    chars += String.fromCharCode(array[i]);\n  }\n  return btoa(chars);\n}\nexport function base64ToArrayBuffer(base64) {\n  return Uint8Array.from(atob(base64), c => c.charCodeAt(0)).buffer;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}