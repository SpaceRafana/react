{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass ContextNode extends Node {\n  constructor(node, context = {}) {\n    super();\n    this.isContextNode = true;\n    this.node = node;\n    this.context = context;\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  setup(builder) {\n    const previousContext = builder.getContext();\n    builder.setContext({\n      ...builder.context,\n      ...this.context\n    });\n    const node = this.node.build(builder);\n    builder.setContext(previousContext);\n    return node;\n  }\n  generate(builder, output) {\n    const previousContext = builder.getContext();\n    builder.setContext({\n      ...builder.context,\n      ...this.context\n    });\n    const snippet = this.node.build(builder, output);\n    builder.setContext(previousContext);\n    return snippet;\n  }\n}\nexport default ContextNode;\nexport const context = nodeProxy(ContextNode);\nexport const label = (node, name) => context(node, {\n  label: name\n});\naddNodeElement('context', context);\naddNodeElement('label', label);\naddNodeClass('ContextNode', ContextNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}