{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoadingManager, Group } from \"three\";\nimport { ColladaLoader } from \"./ColladaLoader.js\";\nimport { unzipSync } from \"fflate\";\nvar KMZLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(KMZLoader, _Loader);\n  var _super = _createSuper(KMZLoader);\n  function KMZLoader(manager) {\n    _classCallCheck(this, KMZLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(KMZLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function findFile(url) {\n        for (var path in zip) {\n          if (path.substr(-url.length) === url) {\n            return zip[path];\n          }\n        }\n      }\n      var manager = new LoadingManager();\n      manager.setURLModifier(function (url) {\n        var image = findFile(url);\n        if (image) {\n          console.log(\"Loading\", url);\n          var blob = new Blob([image.buffer], {\n            type: \"application/octet-stream\"\n          });\n          return URL.createObjectURL(blob);\n        }\n        return url;\n      });\n      var zip = unzipSync(new Uint8Array(data));\n      if (zip[\"doc.kml\"]) {\n        var xml = new DOMParser().parseFromString(fflate.strFromU8(zip[\"doc.kml\"]), \"application/xml\");\n        var model = xml.querySelector(\"Placemark Model Link href\");\n        if (model) {\n          var loader = new ColladaLoader(manager);\n          return loader.parse(fflate.strFromU8(zip[model.textContent]));\n        }\n      } else {\n        console.warn(\"KMZLoader: Missing doc.kml file.\");\n        for (var path in zip) {\n          var extension = path.split(\".\").pop().toLowerCase();\n          if (extension === \"dae\") {\n            var _loader = new ColladaLoader(manager);\n            return _loader.parse(fflate.strFromU8(zip[path]));\n          }\n        }\n      }\n      console.error(\"KMZLoader: Couldn't find .dae file.\");\n      return {\n        scene: new Group()\n      };\n    }\n  }]);\n  return KMZLoader;\n}(Loader);\nexport { KMZLoader };\n//# sourceMappingURL=KMZLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}