{"ast":null,"code":"import _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"args\", \"cellColor\", \"sectionColor\", \"cellSize\", \"sectionSize\", \"followCamera\", \"infiniteGrid\", \"fadeDistance\", \"fadeStrength\", \"cellThickness\", \"sectionThickness\", \"side\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport mergeRefs from 'react-merge-refs';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { version } from '../helpers/constants.js';\nvar GridMaterial = /* @__PURE__ */shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: /* @__PURE__ */new THREE.Color(),\n  sectionColor: /* @__PURE__ */new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false,\n  worldCamProjPosition: /* @__PURE__ */new THREE.Vector3(),\n  worldPlanePosition: /* @__PURE__ */new THREE.Vector3()\n}, /* glsl */\"\\n    varying vec3 localPosition;\\n    varying vec4 worldPosition;\\n\\n    uniform vec3 worldCamProjPosition;\\n    uniform vec3 worldPlanePosition;\\n    uniform float fadeDistance;\\n    uniform bool infiniteGrid;\\n    uniform bool followCamera;\\n\\n    void main() {\\n      localPosition = position.xzy;\\n      if (infiniteGrid) localPosition *= 1.0 + fadeDistance;\\n      \\n      worldPosition = modelMatrix * vec4(localPosition, 1.0);\\n      if (followCamera) {\\n        worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);\\n        localPosition = (inverse(modelMatrix) * worldPosition).xyz;\\n      }\\n\\n      gl_Position = projectionMatrix * viewMatrix * worldPosition;\\n    }\\n  \", /* glsl */\"\\n    varying vec3 localPosition;\\n    varying vec4 worldPosition;\\n\\n    uniform vec3 worldCamProjPosition;\\n    uniform float cellSize;\\n    uniform float sectionSize;\\n    uniform vec3 cellColor;\\n    uniform vec3 sectionColor;\\n    uniform float fadeDistance;\\n    uniform float fadeStrength;\\n    uniform float cellThickness;\\n    uniform float sectionThickness;\\n\\n    float getGrid(float size, float thickness) {\\n      vec2 r = localPosition.xz / size;\\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\\n      float line = min(grid.x, grid.y) + 1.0 - thickness;\\n      return 1.0 - min(line, 1.0);\\n    }\\n\\n    void main() {\\n      float g1 = getGrid(cellSize, cellThickness);\\n      float g2 = getGrid(sectionSize, sectionThickness);\\n\\n      float dist = distance(worldCamProjPosition, worldPosition.xyz);\\n      float d = 1.0 - min(dist / fadeDistance, 1.0);\\n      vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));\\n\\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));\\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\\n      if (gl_FragColor.a <= 0.0) discard;\\n\\n      #include <tonemapping_fragment>\\n      #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n    }\\n  \"));\nvar Grid = /* @__PURE__ */React.forwardRef(function (_ref, fRef) {\n  var args = _ref.args,\n    _ref$cellColor = _ref.cellColor,\n    cellColor = _ref$cellColor === void 0 ? '#000000' : _ref$cellColor,\n    _ref$sectionColor = _ref.sectionColor,\n    sectionColor = _ref$sectionColor === void 0 ? '#2080ff' : _ref$sectionColor,\n    _ref$cellSize = _ref.cellSize,\n    cellSize = _ref$cellSize === void 0 ? 0.5 : _ref$cellSize,\n    _ref$sectionSize = _ref.sectionSize,\n    sectionSize = _ref$sectionSize === void 0 ? 1 : _ref$sectionSize,\n    _ref$followCamera = _ref.followCamera,\n    followCamera = _ref$followCamera === void 0 ? false : _ref$followCamera,\n    _ref$infiniteGrid = _ref.infiniteGrid,\n    infiniteGrid = _ref$infiniteGrid === void 0 ? false : _ref$infiniteGrid,\n    _ref$fadeDistance = _ref.fadeDistance,\n    fadeDistance = _ref$fadeDistance === void 0 ? 100 : _ref$fadeDistance,\n    _ref$fadeStrength = _ref.fadeStrength,\n    fadeStrength = _ref$fadeStrength === void 0 ? 1 : _ref$fadeStrength,\n    _ref$cellThickness = _ref.cellThickness,\n    cellThickness = _ref$cellThickness === void 0 ? 0.5 : _ref$cellThickness,\n    _ref$sectionThickness = _ref.sectionThickness,\n    sectionThickness = _ref$sectionThickness === void 0 ? 1 : _ref$sectionThickness,\n    _ref$side = _ref.side,\n    side = _ref$side === void 0 ? THREE.BackSide : _ref$side,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    GridMaterial: GridMaterial\n  });\n  var ref = React.useRef(null);\n  var plane = new THREE.Plane();\n  var upVector = new THREE.Vector3(0, 1, 0);\n  var zeroVector = new THREE.Vector3(0, 0, 0);\n  useFrame(function (state) {\n    plane.setFromNormalAndCoplanarPoint(upVector, zeroVector).applyMatrix4(ref.current.matrixWorld);\n    var gridMaterial = ref.current.material;\n    var worldCamProjPosition = gridMaterial.uniforms.worldCamProjPosition;\n    var worldPlanePosition = gridMaterial.uniforms.worldPlanePosition;\n    plane.projectPoint(state.camera.position, worldCamProjPosition.value);\n    worldPlanePosition.value.set(0, 0, 0).applyMatrix4(ref.current.matrixWorld);\n  });\n  var uniforms1 = {\n    cellSize: cellSize,\n    sectionSize: sectionSize,\n    cellColor: cellColor,\n    sectionColor: sectionColor,\n    cellThickness: cellThickness,\n    sectionThickness: sectionThickness\n  };\n  var uniforms2 = {\n    fadeDistance: fadeDistance,\n    fadeStrength: fadeStrength,\n    infiniteGrid: infiniteGrid,\n    followCamera: followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([ref, fRef]),\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\nexport { Grid };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}