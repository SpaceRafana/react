{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from \"three\";\nvar STLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(STLLoader, _Loader);\n  var _super = _createSuper(STLLoader);\n  function STLLoader(manager) {\n    _classCallCheck(this, STLLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(STLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function isBinary(data2) {\n        var reader = new DataView(data2);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n        if (expect === reader.byteLength) {\n          return true;\n        }\n        var solid = [115, 111, 108, 105, 100];\n        for (var off = 0; off < 5; off++) {\n          if (matchDataViewAt(solid, reader, off)) return false;\n        }\n        return true;\n      }\n      function matchDataViewAt(query, reader, offset) {\n        for (var i = 0, il = query.length; i < il; i++) {\n          if (query[i] !== reader.getUint8(offset + i, false)) return false;\n        }\n        return true;\n      }\n      function parseBinary(data2) {\n        var reader = new DataView(data2);\n        var faces = reader.getUint32(80, true);\n        var r,\n          g,\n          b,\n          hasColors = false,\n          colors;\n        var defaultR, defaultG, defaultB, alpha;\n        for (var index = 0; index < 80 - 10; index++) {\n          if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n            hasColors = true;\n            colors = new Float32Array(faces * 3 * 3);\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n          }\n        }\n        var dataOffset = 84;\n        var faceLength = 12 * 4 + 2;\n        var geometry = new BufferGeometry();\n        var vertices = new Float32Array(faces * 3 * 3);\n        var normals = new Float32Array(faces * 3 * 3);\n        for (var face = 0; face < faces; face++) {\n          var start = dataOffset + face * faceLength;\n          var normalX = reader.getFloat32(start, true);\n          var normalY = reader.getFloat32(start + 4, true);\n          var normalZ = reader.getFloat32(start + 8, true);\n          if (hasColors) {\n            var packedColor = reader.getUint16(start + 48, true);\n            if ((packedColor & 32768) === 0) {\n              r = (packedColor & 31) / 31;\n              g = (packedColor >> 5 & 31) / 31;\n              b = (packedColor >> 10 & 31) / 31;\n            } else {\n              r = defaultR;\n              g = defaultG;\n              b = defaultB;\n            }\n          }\n          for (var i = 1; i <= 3; i++) {\n            var vertexstart = start + i * 12;\n            var componentIdx = face * 3 * 3 + (i - 1) * 3;\n            vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n            vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n            vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n            normals[componentIdx] = normalX;\n            normals[componentIdx + 1] = normalY;\n            normals[componentIdx + 2] = normalZ;\n            if (hasColors) {\n              colors[componentIdx] = r;\n              colors[componentIdx + 1] = g;\n              colors[componentIdx + 2] = b;\n            }\n          }\n        }\n        geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        if (hasColors) {\n          geometry.setAttribute(\"color\", new BufferAttribute(colors, 3));\n          geometry.hasColors = true;\n          geometry.alpha = alpha;\n        }\n        return geometry;\n      }\n      function parseASCII(data2) {\n        var geometry = new BufferGeometry();\n        var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n        var patternFace = /facet([\\s\\S]*?)endfacet/g;\n        var faceCounter = 0;\n        var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n        var patternVertex = new RegExp(\"vertex\" + patternFloat + patternFloat + patternFloat, \"g\");\n        var patternNormal = new RegExp(\"normal\" + patternFloat + patternFloat + patternFloat, \"g\");\n        var vertices = [];\n        var normals = [];\n        var normal = new Vector3();\n        var result;\n        var groupCount = 0;\n        var startVertex = 0;\n        var endVertex = 0;\n        while ((result = patternSolid.exec(data2)) !== null) {\n          startVertex = endVertex;\n          var solid = result[0];\n          while ((result = patternFace.exec(solid)) !== null) {\n            var vertexCountPerFace = 0;\n            var normalCountPerFace = 0;\n            var text = result[0];\n            while ((result = patternNormal.exec(text)) !== null) {\n              normal.x = parseFloat(result[1]);\n              normal.y = parseFloat(result[2]);\n              normal.z = parseFloat(result[3]);\n              normalCountPerFace++;\n            }\n            while ((result = patternVertex.exec(text)) !== null) {\n              vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n              normals.push(normal.x, normal.y, normal.z);\n              vertexCountPerFace++;\n              endVertex++;\n            }\n            if (normalCountPerFace !== 1) {\n              console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n            }\n            if (vertexCountPerFace !== 3) {\n              console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n            }\n            faceCounter++;\n          }\n          var start = startVertex;\n          var count = endVertex - startVertex;\n          geometry.addGroup(start, count, groupCount);\n          groupCount++;\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        return geometry;\n      }\n      function ensureString(buffer) {\n        if (typeof buffer !== \"string\") {\n          return LoaderUtils.decodeText(new Uint8Array(buffer));\n        }\n        return buffer;\n      }\n      function ensureBinary(buffer) {\n        if (typeof buffer === \"string\") {\n          var array_buffer = new Uint8Array(buffer.length);\n          for (var i = 0; i < buffer.length; i++) {\n            array_buffer[i] = buffer.charCodeAt(i) & 255;\n          }\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buffer;\n        }\n      }\n      var binData = ensureBinary(data);\n      return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n    }\n  }]);\n  return STLLoader;\n}(Loader);\nexport { STLLoader };\n//# sourceMappingURL=STLLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}