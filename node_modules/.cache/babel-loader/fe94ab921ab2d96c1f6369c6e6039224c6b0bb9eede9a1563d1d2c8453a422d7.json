{"ast":null,"code":"import _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"enabled\", \"firstHitOnly\", \"children\", \"strategy\", \"verbose\", \"setBoundingBox\", \"maxDepth\", \"maxLeafTris\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { Mesh } from 'three';\nimport { SAH, acceleratedRaycast, computeBoundsTree, disposeBoundsTree } from 'three-mesh-bvh';\nvar isMesh = function isMesh(child) {\n  return child.isMesh;\n};\n\n/**\n * @deprecated Use the Bvh component instead\n */\nfunction useBVH(mesh, options) {\n  options = _objectSpread({\n    strategy: SAH,\n    verbose: false,\n    setBoundingBox: true,\n    maxDepth: 40,\n    maxLeafTris: 10\n  }, options);\n  React.useEffect(function () {\n    if (mesh.current) {\n      mesh.current.raycast = acceleratedRaycast;\n      var geometry = mesh.current.geometry;\n      geometry.computeBoundsTree = computeBoundsTree;\n      geometry.disposeBoundsTree = disposeBoundsTree;\n      geometry.computeBoundsTree(options);\n      return function () {\n        if (geometry.boundsTree) {\n          geometry.disposeBoundsTree();\n        }\n      };\n    }\n  }, [mesh, JSON.stringify(options)]);\n}\nvar Bvh = /* @__PURE__ */React.forwardRef(function (_ref, fref) {\n  var _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    _ref$firstHitOnly = _ref.firstHitOnly,\n    firstHitOnly = _ref$firstHitOnly === void 0 ? false : _ref$firstHitOnly,\n    children = _ref.children,\n    _ref$strategy = _ref.strategy,\n    strategy = _ref$strategy === void 0 ? SAH : _ref$strategy,\n    _ref$verbose = _ref.verbose,\n    verbose = _ref$verbose === void 0 ? false : _ref$verbose,\n    _ref$setBoundingBox = _ref.setBoundingBox,\n    setBoundingBox = _ref$setBoundingBox === void 0 ? true : _ref$setBoundingBox,\n    _ref$maxDepth = _ref.maxDepth,\n    maxDepth = _ref$maxDepth === void 0 ? 40 : _ref$maxDepth,\n    _ref$maxLeafTris = _ref.maxLeafTris,\n    maxLeafTris = _ref$maxLeafTris === void 0 ? 10 : _ref$maxLeafTris,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var ref = React.useRef(null);\n  var raycaster = useThree(function (state) {\n    return state.raycaster;\n  });\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  React.useEffect(function () {\n    if (enabled) {\n      var options = {\n        strategy: strategy,\n        verbose: verbose,\n        setBoundingBox: setBoundingBox,\n        maxDepth: maxDepth,\n        maxLeafTris: maxLeafTris\n      };\n      var group = ref.current;\n      // This can only safely work if the component is used once, but there is no alternative.\n      // Hijacking the raycast method to do it for individual meshes is not an option as it would\n      // cost too much memory ...\n      raycaster.firstHitOnly = firstHitOnly;\n      group.traverse(function (child) {\n        // Only include meshes that do not yet have a boundsTree and whose raycast is standard issue\n        if (isMesh(child) && !child.geometry.boundsTree && child.raycast === Mesh.prototype.raycast) {\n          child.raycast = acceleratedRaycast;\n          child.geometry.computeBoundsTree = computeBoundsTree;\n          child.geometry.disposeBoundsTree = disposeBoundsTree;\n          child.geometry.computeBoundsTree(options);\n        }\n      });\n      return function () {\n        delete raycaster.firstHitOnly;\n        group.traverse(function (child) {\n          if (isMesh(child) && child.geometry.boundsTree) {\n            child.geometry.disposeBoundsTree();\n            child.raycast = Mesh.prototype.raycast;\n          }\n        });\n      };\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), children);\n});\nexport { Bvh, useBVH };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}