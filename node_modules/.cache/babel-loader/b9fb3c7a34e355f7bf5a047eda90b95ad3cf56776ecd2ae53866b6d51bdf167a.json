{"ast":null,"code":"import _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBAFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nvar geometry = new BufferGeometry();\nvar float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\nvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\ngeometry.setIndex([0, 1, 2, 0, 2, 3]);\ngeometry.setAttribute(\"position\", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\ngeometry.setAttribute(\"uv\", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\nvar _Lensflare = /*#__PURE__*/function (_Mesh) {\n  _inherits(_Lensflare, _Mesh);\n  var _super = _createSuper(_Lensflare);\n  function _Lensflare() {\n    var _this;\n    _classCallCheck(this, _Lensflare);\n    _this = _super.call(this, _Lensflare.Geometry, new MeshBasicMaterial({\n      opacity: 0,\n      transparent: true\n    }));\n    _this.isLensflare = true;\n    _this.type = \"Lensflare\";\n    _this.frustumCulled = false;\n    _this.renderOrder = Infinity;\n    var positionScreen = new Vector3();\n    var positionView = new Vector3();\n    var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    tempMap.minFilter = NearestFilter;\n    tempMap.magFilter = NearestFilter;\n    tempMap.wrapS = ClampToEdgeWrapping;\n    tempMap.wrapT = ClampToEdgeWrapping;\n    var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    occlusionMap.minFilter = NearestFilter;\n    occlusionMap.magFilter = NearestFilter;\n    occlusionMap.wrapS = ClampToEdgeWrapping;\n    occlusionMap.wrapT = ClampToEdgeWrapping;\n    var geometry2 = _Lensflare.Geometry;\n    var material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    var material1b = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: tempMap\n        },\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform vec3 screenPosition;\\n\\t\\t\\t\\tuniform vec2 scale;\\n\\n\\t\\t\\t\\tattribute vec3 position;\\n\\t\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUV = uv;\\n\\n\\t\\t\\t\\t\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader: /* glsl */\"\\n\\n\\t\\t\\t\\tprecision highp float;\\n\\n\\t\\t\\t\\tuniform sampler2D map;\\n\\n\\t\\t\\t\\tvarying vec2 vUV;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( map, vUV );\\n\\n\\t\\t\\t\\t}\",\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    });\n    var mesh1 = new Mesh(geometry2, material1a);\n    var elements = [];\n    var shader = LensflareElement.Shader;\n    var material2 = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: null\n        },\n        occlusionMap: {\n          value: occlusionMap\n        },\n        color: {\n          value: new Color(16777215)\n        },\n        scale: {\n          value: new Vector2()\n        },\n        screenPosition: {\n          value: new Vector3()\n        }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    var mesh2 = new Mesh(geometry2, material2);\n    _this.addElement = function (element) {\n      elements.push(element);\n    };\n    var scale = new Vector2();\n    var screenPositionPixels = new Vector2();\n    var validArea = new Box2();\n    var viewport = new Vector4();\n    _this.onBeforeRender = function (renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      var invAspect = viewport.w / viewport.z;\n      var halfViewportWidth = viewport.z / 2;\n      var halfViewportHeight = viewport.w / 2;\n      var size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0) return;\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n      if (validArea.containsPoint(screenPositionPixels)) {\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n        var uniforms = material1a.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1a, mesh1, null);\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n        uniforms = material1b.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1b, mesh1, null);\n        var vecX = -positionScreen.x * 2;\n        var vecY = -positionScreen.y * 2;\n        for (var i = 0, l = elements.length; i < l; i++) {\n          var element = elements[i];\n          var uniforms2 = material2.uniforms;\n          uniforms2[\"color\"].value.copy(element.color);\n          uniforms2[\"map\"].value = element.texture;\n          uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n          uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n          var invAspect2 = viewport.w / viewport.z;\n          uniforms2[\"scale\"].value.set(size * invAspect2, size);\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry2, material2, mesh2, null);\n        }\n      }\n    };\n    _this.dispose = function () {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n      for (var i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n    return _this;\n  }\n  return _createClass(_Lensflare);\n}(Mesh);\nvar Lensflare = _Lensflare;\n__publicField(Lensflare, \"Geometry\", geometry);\nvar LensflareElement = /*#__PURE__*/_createClass(function LensflareElement(texture) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Color(16777215);\n  _classCallCheck(this, LensflareElement);\n  this.texture = texture;\n  this.size = size;\n  this.distance = distance;\n  this.color = color;\n});\n__publicField(LensflareElement, \"Shader\", {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform vec3 screenPosition;\\n\\t\\tuniform vec2 scale;\\n\\n\\t\\tuniform sampler2D occlusionMap;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUV = uv;\\n\\n\\t\\t\\tvec2 pos = position.xy;\\n\\n\\t\\t\\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\\n\\t\\t\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\\n\\n\\t\\t\\tvVisibility =        visibility.r / 9.0;\\n\\t\\t\\tvVisibility *= 1.0 - visibility.g / 9.0;\\n\\t\\t\\tvVisibility *=       visibility.b / 9.0;\\n\\n\\t\\t\\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\n\\t\\tprecision highp float;\\n\\n\\t\\tuniform sampler2D map;\\n\\t\\tuniform vec3 color;\\n\\n\\t\\tvarying vec2 vUV;\\n\\t\\tvarying float vVisibility;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 texture = texture2D( map, vUV );\\n\\t\\t\\ttexture.a *= vVisibility;\\n\\t\\t\\tgl_FragColor = texture;\\n\\t\\t\\tgl_FragColor.rgb *= color;\\n\\n\\t\\t}\"\n});\nexport { Lensflare, LensflareElement };\n//# sourceMappingURL=Lensflare.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}