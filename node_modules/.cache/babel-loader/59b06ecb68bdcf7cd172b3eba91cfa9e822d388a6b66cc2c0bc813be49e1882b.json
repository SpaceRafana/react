{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar _SSRPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSRPass, _Pass);\n  var _super = _createSuper(_SSRPass);\n  function _SSRPass(_ref) {\n    var _this;\n    var renderer = _ref.renderer,\n      scene = _ref.scene,\n      camera = _ref.camera,\n      width = _ref.width,\n      height = _ref.height,\n      selects = _ref.selects,\n      _ref$bouncing = _ref.bouncing,\n      bouncing = _ref$bouncing === void 0 ? false : _ref$bouncing,\n      groundReflector = _ref.groundReflector;\n    _classCallCheck(this, _SSRPass);\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.renderer = renderer;\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.groundReflector = groundReflector;\n    _this.opacity = SSRShader.uniforms.opacity.value;\n    _this.output = 0;\n    _this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    _this.thickness = SSRShader.uniforms.thickness.value;\n    _this.tempColor = new Color();\n    _this._selects = selects;\n    _this.selective = Array.isArray(_this._selects);\n    Object.defineProperty(_assertThisInitialized(_this), \"selects\", {\n      get: function get() {\n        return this._selects;\n      },\n      set: function set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    _this._bouncing = bouncing;\n    Object.defineProperty(_assertThisInitialized(_this), \"bouncing\", {\n      get: function get() {\n        return this._bouncing;\n      },\n      set: function set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    _this.blur = true;\n    _this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(_assertThisInitialized(_this), \"distanceAttenuation\", {\n      get: function get() {\n        return this._distanceAttenuation;\n      },\n      set: function set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(_assertThisInitialized(_this), \"fresnel\", {\n      get: function get() {\n        return this._fresnel;\n      },\n      set: function set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(_assertThisInitialized(_this), \"infiniteThick\", {\n      get: function get() {\n        return this._infiniteThick;\n      },\n      set: function set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true\n    });\n    _this.prevRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.metalnessRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.ssrRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.blurRenderTarget = _this.ssrRenderTarget.clone();\n    _this.blurRenderTarget2 = _this.ssrRenderTarget.clone();\n    _this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(_this.width * _this.width + _this.height * _this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssrMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssrMaterial.defines.SELECTIVE = _this.selective;\n    _this.ssrMaterial.needsUpdate = true;\n    _this.ssrMaterial.uniforms[\"tMetalness\"].value = _this.metalnessRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.ssrMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssrMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssrMaterial.uniforms[\"thickness\"].value = _this.thickness;\n    _this.ssrMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n    _this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    _this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssrRenderTarget.texture;\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial2.uniforms[\"tDiffuse\"].value = _this.blurRenderTarget.texture;\n    _this.blurMaterial2.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(_SSRPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.prevRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.metalnessRenderTarget.dispose();\n      this.ssrRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.blurRenderTarget2.dispose();\n      this.normalMaterial.dispose();\n      this.metalnessOnMaterial.dispose();\n      this.metalnessOffMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.blurMaterial2.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      if (this.groundReflector) {\n        this.groundReflector.visible = false;\n        this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n        this.groundReflector.visible = true;\n      }\n      renderer.render(this.scene, this.camera);\n      if (this.groundReflector) this.groundReflector.visible = false;\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n      if (this.selective) {\n        this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n      }\n      this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n      this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n      this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n      if (this.blur) {\n        this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n        this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n      }\n      switch (this.output) {\n        case _SSRPass.OUTPUT.Default:\n          if (this.bouncing) {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          } else {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          }\n          break;\n        case _SSRPass.OUTPUT.SSR:\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.bouncing) {\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          }\n          break;\n        case _SSRPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Metalness:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSRPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderMetalness\",\n    value: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      var _this2 = this;\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.traverseVisible(function (child) {\n        child._SSRPassBackupMaterial = child.material;\n        if (_this2._selects.includes(child)) {\n          child.material = _this2.metalnessOnMaterial;\n        } else {\n          child.material = _this2.metalnessOffMaterial;\n        }\n      });\n      renderer.render(this.scene, this.camera);\n      this.scene.traverseVisible(function (child) {\n        child.material = child._SSRPassBackupMaterial;\n      });\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n      this.ssrMaterial.needsUpdate = true;\n      this.beautyRenderTarget.setSize(width, height);\n      this.prevRenderTarget.setSize(width, height);\n      this.ssrRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.metalnessRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.blurRenderTarget2.setSize(width, height);\n      this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }]);\n  return _SSRPass;\n}(Pass);\nvar SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport { SSRPass };\n//# sourceMappingURL=SSRPass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}