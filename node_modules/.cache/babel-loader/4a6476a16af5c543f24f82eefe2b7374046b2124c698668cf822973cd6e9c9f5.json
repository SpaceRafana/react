{"ast":null,"code":"import _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { EventDispatcher, Plane, Raycaster, Vector2, Vector3, Matrix4 } from \"three\";\nvar DragControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(DragControls, _EventDispatcher);\n  var _super = _createSuper(DragControls);\n  function DragControls(_objects, _camera, _domElement) {\n    var _this;\n    _classCallCheck(this, DragControls);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"enabled\", true);\n    __publicField(_assertThisInitialized(_this), \"transformGroup\", false);\n    __publicField(_assertThisInitialized(_this), \"_objects\");\n    __publicField(_assertThisInitialized(_this), \"_camera\");\n    __publicField(_assertThisInitialized(_this), \"_domElement\");\n    __publicField(_assertThisInitialized(_this), \"_plane\", new Plane());\n    __publicField(_assertThisInitialized(_this), \"_raycaster\", new Raycaster());\n    __publicField(_assertThisInitialized(_this), \"_mouse\", new Vector2());\n    __publicField(_assertThisInitialized(_this), \"_offset\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"_intersection\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"_worldPosition\", new Vector3());\n    __publicField(_assertThisInitialized(_this), \"_inverseMatrix\", new Matrix4());\n    __publicField(_assertThisInitialized(_this), \"_intersections\", []);\n    __publicField(_assertThisInitialized(_this), \"_selected\", null);\n    __publicField(_assertThisInitialized(_this), \"_hovered\", null);\n    __publicField(_assertThisInitialized(_this), \"activate\", function () {\n      _this._domElement.addEventListener(\"pointermove\", _this.onPointerMove);\n      _this._domElement.addEventListener(\"pointerdown\", _this.onPointerDown);\n      _this._domElement.addEventListener(\"pointerup\", _this.onPointerCancel);\n      _this._domElement.addEventListener(\"pointerleave\", _this.onPointerCancel);\n      _this._domElement.addEventListener(\"touchmove\", _this.onTouchMove);\n      _this._domElement.addEventListener(\"touchstart\", _this.onTouchStart);\n      _this._domElement.addEventListener(\"touchend\", _this.onTouchEnd);\n    });\n    __publicField(_assertThisInitialized(_this), \"deactivate\", function () {\n      _this._domElement.removeEventListener(\"pointermove\", _this.onPointerMove);\n      _this._domElement.removeEventListener(\"pointerdown\", _this.onPointerDown);\n      _this._domElement.removeEventListener(\"pointerup\", _this.onPointerCancel);\n      _this._domElement.removeEventListener(\"pointerleave\", _this.onPointerCancel);\n      _this._domElement.removeEventListener(\"touchmove\", _this.onTouchMove);\n      _this._domElement.removeEventListener(\"touchstart\", _this.onTouchStart);\n      _this._domElement.removeEventListener(\"touchend\", _this.onTouchEnd);\n      _this._domElement.style.cursor = \"\";\n    });\n    // TODO: confirm if this can be removed?\n    __publicField(_assertThisInitialized(_this), \"dispose\", function () {\n      return _this.deactivate();\n    });\n    __publicField(_assertThisInitialized(_this), \"getObjects\", function () {\n      return _this._objects;\n    });\n    __publicField(_assertThisInitialized(_this), \"getRaycaster\", function () {\n      return _this._raycaster;\n    });\n    __publicField(_assertThisInitialized(_this), \"onMouseMove\", function (event) {\n      var rect = _this._domElement.getBoundingClientRect();\n      _this._mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _this._mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n      _this._raycaster.setFromCamera(_this._mouse, _this._camera);\n      if (_this._selected && _this.enabled) {\n        if (_this._raycaster.ray.intersectPlane(_this._plane, _this._intersection)) {\n          _this._selected.position.copy(_this._intersection.sub(_this._offset).applyMatrix4(_this._inverseMatrix));\n        }\n        _this.dispatchEvent({\n          type: \"drag\",\n          object: _this._selected\n        });\n        return;\n      }\n      _this._intersections.length = 0;\n      _this._raycaster.setFromCamera(_this._mouse, _this._camera);\n      _this._raycaster.intersectObjects(_this._objects, true, _this._intersections);\n      if (_this._intersections.length > 0) {\n        var object = _this._intersections[0].object;\n        _this._plane.setFromNormalAndCoplanarPoint(_this._camera.getWorldDirection(_this._plane.normal), _this._worldPosition.setFromMatrixPosition(object.matrixWorld));\n        if (_this._hovered !== object) {\n          _this.dispatchEvent({\n            type: \"hoveron\",\n            object: object\n          });\n          _this._domElement.style.cursor = \"pointer\";\n          _this._hovered = object;\n        }\n      } else {\n        if (_this._hovered !== null) {\n          _this.dispatchEvent({\n            type: \"hoveroff\",\n            object: _this._hovered\n          });\n          _this._domElement.style.cursor = \"auto\";\n          _this._hovered = null;\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onMouseDown\", function () {\n      _this._intersections.length = 0;\n      _this._raycaster.setFromCamera(_this._mouse, _this._camera);\n      _this._raycaster.intersectObjects(_this._objects, true, _this._intersections);\n      if (_this._intersections.length > 0) {\n        _this._selected = _this.transformGroup === true ? _this._objects[0] : _this._intersections[0].object;\n        if (_this._raycaster.ray.intersectPlane(_this._plane, _this._intersection) && _this._selected.parent) {\n          _this._inverseMatrix.copy(_this._selected.parent.matrixWorld).invert();\n          _this._offset.copy(_this._intersection).sub(_this._worldPosition.setFromMatrixPosition(_this._selected.matrixWorld));\n        }\n        _this._domElement.style.cursor = \"move\";\n        _this.dispatchEvent({\n          type: \"dragstart\",\n          object: _this._selected\n        });\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onMouseCancel\", function () {\n      if (_this._selected) {\n        _this.dispatchEvent({\n          type: \"dragend\",\n          object: _this._selected\n        });\n        _this._selected = null;\n      }\n      _this._domElement.style.cursor = _this._hovered ? \"pointer\" : \"auto\";\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerMove\", function (event) {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          _this.onMouseMove(event);\n          break;\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerDown\", function (event) {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          _this.onMouseDown();\n          break;\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerCancel\", function (event) {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          _this.onMouseCancel();\n          break;\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onTouchMove\", function (event) {\n      event.preventDefault();\n      var newEvent = event.changedTouches[0];\n      var rect = _this._domElement.getBoundingClientRect();\n      _this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      _this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      _this._raycaster.setFromCamera(_this._mouse, _this._camera);\n      if (_this._selected && _this.enabled) {\n        if (_this._raycaster.ray.intersectPlane(_this._plane, _this._intersection)) {\n          _this._selected.position.copy(_this._intersection.sub(_this._offset).applyMatrix4(_this._inverseMatrix));\n        }\n        _this.dispatchEvent({\n          type: \"drag\",\n          object: _this._selected\n        });\n        return;\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onTouchStart\", function (event) {\n      event.preventDefault();\n      var newEvent = event.changedTouches[0];\n      var rect = _this._domElement.getBoundingClientRect();\n      _this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      _this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      _this._intersections.length = 0;\n      _this._raycaster.setFromCamera(_this._mouse, _this._camera);\n      _this._raycaster.intersectObjects(_this._objects, true, _this._intersections);\n      if (_this._intersections.length > 0) {\n        _this._selected = _this.transformGroup === true ? _this._objects[0] : _this._intersections[0].object;\n        _this._plane.setFromNormalAndCoplanarPoint(_this._camera.getWorldDirection(_this._plane.normal), _this._worldPosition.setFromMatrixPosition(_this._selected.matrixWorld));\n        if (_this._raycaster.ray.intersectPlane(_this._plane, _this._intersection) && _this._selected.parent) {\n          _this._inverseMatrix.copy(_this._selected.parent.matrixWorld).invert();\n          _this._offset.copy(_this._intersection).sub(_this._worldPosition.setFromMatrixPosition(_this._selected.matrixWorld));\n        }\n        _this._domElement.style.cursor = \"move\";\n        _this.dispatchEvent({\n          type: \"dragstart\",\n          object: _this._selected\n        });\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onTouchEnd\", function (event) {\n      event.preventDefault();\n      if (_this._selected) {\n        _this.dispatchEvent({\n          type: \"dragend\",\n          object: _this._selected\n        });\n        _this._selected = null;\n      }\n      _this._domElement.style.cursor = \"auto\";\n    });\n    _this._objects = _objects;\n    _this._camera = _camera;\n    _this._domElement = _domElement;\n    _this.activate();\n    return _this;\n  }\n  return _createClass(DragControls);\n}(EventDispatcher);\nexport { DragControls };\n//# sourceMappingURL=DragControls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}