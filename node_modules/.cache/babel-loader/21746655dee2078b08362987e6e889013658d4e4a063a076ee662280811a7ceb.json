{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Panel from \"./panel.js\";\nvar _Stats = /*#__PURE__*/function () {\n  function _Stats() {\n    var _this = this;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$logsPerSecond = _ref.logsPerSecond,\n      logsPerSecond = _ref$logsPerSecond === void 0 ? 20 : _ref$logsPerSecond,\n      _ref$samplesLog = _ref.samplesLog,\n      samplesLog = _ref$samplesLog === void 0 ? 100 : _ref$samplesLog,\n      _ref$samplesGraph = _ref.samplesGraph,\n      samplesGraph = _ref$samplesGraph === void 0 ? 10 : _ref$samplesGraph,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision,\n      _ref$minimal = _ref.minimal,\n      minimal = _ref$minimal === void 0 ? false : _ref$minimal,\n      _ref$horizontal = _ref.horizontal,\n      horizontal = _ref$horizontal === void 0 ? true : _ref$horizontal,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 0 : _ref$mode;\n    _classCallCheck(this, _Stats);\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", function (event) {\n        event.preventDefault();\n        _this.showPanel(++_this.mode % _this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", function () {\n        _this.resizePanel(_this.fpsPanel, 0);\n        _this.resizePanel(_this.msPanel, 1);\n        if (_this.gpuPanel) {\n          _this.resizePanel(_this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  _createClass(_Stats, [{\n    key: \"resizePanel\",\n    value: function resizePanel(panel, offset) {\n      panel.canvas.style.position = \"absolute\";\n      if (this.minimal) {\n        panel.canvas.style.display = \"none\";\n      } else {\n        panel.canvas.style.display = \"block\";\n        if (this.horizontal) {\n          panel.canvas.style.top = \"0px\";\n          panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n        } else {\n          panel.canvas.style.left = \"0px\";\n          panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n        }\n      }\n    }\n  }, {\n    key: \"addPanel\",\n    value: function addPanel(panel, offset) {\n      if (panel.canvas) {\n        this.container.appendChild(panel.canvas);\n        this.resizePanel(panel, offset);\n      }\n      return panel;\n    }\n  }, {\n    key: \"showPanel\",\n    value: function showPanel(id) {\n      for (var i = 0; i < this.container.children.length; i++) {\n        var child = this.container.children[i];\n        child.style.display = i === id ? \"block\" : \"none\";\n      }\n      this.mode = id;\n    }\n  }, {\n    key: \"init\",\n    value: function init(canvas) {\n      this.canvasGpu = canvas;\n      if (!this.canvasGpu) return;\n      this.gl = this.canvasGpu.getContext(\"webgl2\");\n      this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n      if (this.ext) {\n        this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n      }\n    }\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      this.beginProfiling(\"cpu-started\");\n      if (!this.gl || !this.ext) return;\n      if (this.query) {\n        var available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n        this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n        if (available && !this.disjoint) {\n          this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n          var ms = this.ns * 1e-6;\n          if (available || this.disjoint) {\n            this.gl.deleteQuery(this.query);\n            this.query = null;\n          }\n          if (available) {\n            this.addToAverage(ms, this.averageGpu);\n          }\n        }\n      }\n      if (!this.query) {\n        this.queryCreated = true;\n        this.query = this.gl.createQuery();\n        if (this.query) {\n          this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n        }\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.beginTime = this.endInternal();\n      this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n      if (!this.gl || !this.ext) return;\n      if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n    }\n  }, {\n    key: \"endInternal\",\n    value: function endInternal() {\n      this.frames++;\n      var time = (performance || Date).now();\n      if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n        this.updatePanel(this.msPanel, this.averageCpu);\n        this.updatePanel(this.gpuPanel, this.averageGpu);\n        this.prevCpuTime = time;\n      }\n      if (time >= this.prevTime + 1e3) {\n        var fps = this.frames * 1e3 / (time - this.prevTime);\n        this.fpsPanel.update(fps, fps, 100, 100, 0);\n        this.prevTime = time;\n        this.frames = 0;\n      }\n      return time;\n    }\n  }, {\n    key: \"addToAverage\",\n    value: function addToAverage(value, averageArray) {\n      averageArray.logs.push(value);\n      if (averageArray.logs.length > this.samplesLog) {\n        averageArray.logs.shift();\n      }\n      averageArray.graph.push(value);\n      if (averageArray.graph.length > this.samplesGraph) {\n        averageArray.graph.shift();\n      }\n    }\n  }, {\n    key: \"beginProfiling\",\n    value: function beginProfiling(marker) {\n      if (window.performance) {\n        window.performance.mark(marker);\n      }\n    }\n  }, {\n    key: \"endProfiling\",\n    value: function endProfiling(startMarker, endMarker, measureName, averageArray) {\n      if (window.performance && endMarker) {\n        window.performance.mark(endMarker);\n        var cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n        this.addToAverage(cpuMeasure.duration, averageArray);\n      }\n    }\n  }, {\n    key: \"updatePanel\",\n    value: function updatePanel(panel, averageArray) {\n      if (averageArray.logs.length > 0) {\n        var sumLog = 0;\n        var max = 0.01;\n        for (var i = 0; i < averageArray.logs.length; i++) {\n          sumLog += averageArray.logs[i];\n          if (averageArray.logs[i] > max) {\n            max = averageArray.logs[i];\n          }\n        }\n        var sumGraph = 0;\n        var maxGraph = 0.01;\n        for (var _i = 0; _i < averageArray.graph.length; _i++) {\n          sumGraph += averageArray.graph[_i];\n          if (averageArray.graph[_i] > maxGraph) {\n            maxGraph = averageArray.graph[_i];\n          }\n        }\n        if (panel) {\n          panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n        }\n      }\n    }\n  }]);\n  return _Stats;\n}();\n_Stats.Panel = Panel;\nvar Stats = _Stats;\nexport { Stats as default };\n//# sourceMappingURL=main.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}