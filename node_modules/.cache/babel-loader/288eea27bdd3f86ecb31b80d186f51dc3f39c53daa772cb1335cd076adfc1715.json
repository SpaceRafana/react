{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\nimport { Vector3 } from 'three';\nclass Object3DNode extends Node {\n  constructor(scope = Object3DNode.VIEW_MATRIX, object3d = null) {\n    super();\n    this.scope = scope;\n    this.object3d = object3d;\n    this.updateType = NodeUpdateType.OBJECT;\n    this._uniformNode = new UniformNode(null);\n  }\n  getNodeType() {\n    const scope = this.scope;\n    if (scope === Object3DNode.WORLD_MATRIX || scope === Object3DNode.VIEW_MATRIX) {\n      return 'mat4';\n    } else if (scope === Object3DNode.NORMAL_MATRIX) {\n      return 'mat3';\n    } else if (scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE) {\n      return 'vec3';\n    }\n  }\n  update(frame) {\n    const object = this.object3d;\n    const uniformNode = this._uniformNode;\n    const scope = this.scope;\n    if (scope === Object3DNode.VIEW_MATRIX) {\n      uniformNode.value = object.modelViewMatrix;\n    } else if (scope === Object3DNode.NORMAL_MATRIX) {\n      uniformNode.value = object.normalMatrix;\n    } else if (scope === Object3DNode.WORLD_MATRIX) {\n      uniformNode.value = object.matrixWorld;\n    } else if (scope === Object3DNode.POSITION) {\n      uniformNode.value = uniformNode.value || new Vector3();\n      uniformNode.value.setFromMatrixPosition(object.matrixWorld);\n    } else if (scope === Object3DNode.SCALE) {\n      uniformNode.value = uniformNode.value || new Vector3();\n      uniformNode.value.setFromMatrixScale(object.matrixWorld);\n    } else if (scope === Object3DNode.DIRECTION) {\n      uniformNode.value = uniformNode.value || new Vector3();\n      object.getWorldDirection(uniformNode.value);\n    } else if (scope === Object3DNode.VIEW_POSITION) {\n      const camera = frame.camera;\n      uniformNode.value = uniformNode.value || new Vector3();\n      uniformNode.value.setFromMatrixPosition(object.matrixWorld);\n      uniformNode.value.applyMatrix4(camera.matrixWorldInverse);\n    }\n  }\n  generate(builder) {\n    const scope = this.scope;\n    if (scope === Object3DNode.WORLD_MATRIX || scope === Object3DNode.VIEW_MATRIX) {\n      this._uniformNode.nodeType = 'mat4';\n    } else if (scope === Object3DNode.NORMAL_MATRIX) {\n      this._uniformNode.nodeType = 'mat3';\n    } else if (scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE) {\n      this._uniformNode.nodeType = 'vec3';\n    }\n    return this._uniformNode.build(builder);\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nObject3DNode.VIEW_MATRIX = 'viewMatrix';\nObject3DNode.NORMAL_MATRIX = 'normalMatrix';\nObject3DNode.WORLD_MATRIX = 'worldMatrix';\nObject3DNode.POSITION = 'position';\nObject3DNode.SCALE = 'scale';\nObject3DNode.VIEW_POSITION = 'viewPosition';\nObject3DNode.DIRECTION = 'direction';\nexport default Object3DNode;\nexport const objectDirection = nodeProxy(Object3DNode, Object3DNode.DIRECTION);\nexport const objectViewMatrix = nodeProxy(Object3DNode, Object3DNode.VIEW_MATRIX);\nexport const objectNormalMatrix = nodeProxy(Object3DNode, Object3DNode.NORMAL_MATRIX);\nexport const objectWorldMatrix = nodeProxy(Object3DNode, Object3DNode.WORLD_MATRIX);\nexport const objectPosition = nodeProxy(Object3DNode, Object3DNode.POSITION);\nexport const objectScale = nodeProxy(Object3DNode, Object3DNode.SCALE);\nexport const objectViewPosition = nodeProxy(Object3DNode, Object3DNode.VIEW_POSITION);\naddNodeClass('Object3DNode', Object3DNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}