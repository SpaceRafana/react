{"ast":null,"code":"import { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { sheen, sheenRoughness } from '../../core/PropertyNode.js';\nimport { tslFn, float } from '../../shadernode/ShaderNode.js';\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nconst D_Charlie = (roughness, dotNH) => {\n  const alpha = roughness.pow2();\n\n  // Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\n  const invAlpha = float(1.0).div(alpha);\n  const cos2h = dotNH.pow2();\n  const sin2h = cos2h.oneMinus().max(0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n  return float(2.0).add(invAlpha).mul(sin2h.pow(invAlpha.mul(0.5))).div(2.0 * Math.PI);\n};\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nconst V_Neubelt = (dotNV, dotNL) => {\n  // Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n  return float(1.0).div(float(4.0).mul(dotNL.add(dotNV).sub(dotNL.mul(dotNV))));\n};\nconst BRDF_Sheen = tslFn(({\n  lightDirection\n}) => {\n  const halfDir = lightDirection.add(positionViewDirection).normalize();\n  const dotNL = transformedNormalView.dot(lightDirection).clamp();\n  const dotNV = transformedNormalView.dot(positionViewDirection).clamp();\n  const dotNH = transformedNormalView.dot(halfDir).clamp();\n  const D = D_Charlie(sheenRoughness, dotNH);\n  const V = V_Neubelt(dotNV, dotNL);\n  return sheen.mul(D).mul(V);\n});\nexport default BRDF_Sheen;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}