{"ast":null,"code":"import _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nvar KHR_SUPERCOMPRESSION_NONE = 0;\nvar KHR_SUPERCOMPRESSION_ZSTD = 2;\nvar KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nvar KHR_DF_VENDORID_KHRONOS = 0;\nvar KHR_DF_VERSION = 2;\nvar KHR_DF_MODEL_UNSPECIFIED = 0;\nvar KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nvar KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\nvar KHR_DF_TRANSFER_SRGB = 2;\nvar KHR_DF_PRIMARIES_BT709 = 1;\nvar KHR_DF_SAMPLE_DATATYPE_SIGNED = 64;\nvar VK_FORMAT_UNDEFINED = 0;\nvar VK_FORMAT_R8_UNORM = 9;\nvar VK_FORMAT_R8_SRGB = 15;\nvar VK_FORMAT_R8G8_UNORM = 16;\nvar VK_FORMAT_R8G8_SRGB = 22;\nvar VK_FORMAT_R8G8B8A8_UNORM = 37;\nvar VK_FORMAT_R8G8B8A8_SRGB = 43;\nvar VK_FORMAT_R16_SFLOAT = 76;\nvar VK_FORMAT_R16G16_SFLOAT = 83;\nvar VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nvar VK_FORMAT_R32_SFLOAT = 100;\nvar VK_FORMAT_R32G32_SFLOAT = 103;\nvar VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nvar KTX2Container = /*#__PURE__*/_createClass(function KTX2Container() {\n  _classCallCheck(this, KTX2Container);\n  this.vkFormat = VK_FORMAT_UNDEFINED;\n  this.typeSize = 1;\n  this.pixelWidth = 0;\n  this.pixelHeight = 0;\n  this.pixelDepth = 0;\n  this.layerCount = 0;\n  this.faceCount = 1;\n  this.supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n  this.levels = [];\n  this.dataFormatDescriptor = [{\n    vendorId: KHR_DF_VENDORID_KHRONOS,\n    descriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n    descriptorBlockSize: 0,\n    versionNumber: KHR_DF_VERSION,\n    colorModel: KHR_DF_MODEL_UNSPECIFIED,\n    colorPrimaries: KHR_DF_PRIMARIES_BT709,\n    transferFunction: KHR_DF_TRANSFER_SRGB,\n    flags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n    texelBlockDimension: [0, 0, 0, 0],\n    bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n    samples: []\n  }];\n  this.keyValue = {};\n  this.globalData = null;\n});\nvar BufferReader = /*#__PURE__*/function () {\n  function BufferReader(data, byteOffset, byteLength, littleEndian) {\n    _classCallCheck(this, BufferReader);\n    this._dataView = void 0;\n    this._littleEndian = void 0;\n    this._offset = void 0;\n    this._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n    this._littleEndian = littleEndian;\n    this._offset = 0;\n  }\n  _createClass(BufferReader, [{\n    key: \"_nextUint8\",\n    value: function _nextUint8() {\n      var value = this._dataView.getUint8(this._offset);\n      this._offset += 1;\n      return value;\n    }\n  }, {\n    key: \"_nextUint16\",\n    value: function _nextUint16() {\n      var value = this._dataView.getUint16(this._offset, this._littleEndian);\n      this._offset += 2;\n      return value;\n    }\n  }, {\n    key: \"_nextUint32\",\n    value: function _nextUint32() {\n      var value = this._dataView.getUint32(this._offset, this._littleEndian);\n      this._offset += 4;\n      return value;\n    }\n  }, {\n    key: \"_nextUint64\",\n    value: function _nextUint64() {\n      var left = this._dataView.getUint32(this._offset, this._littleEndian);\n      var right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n      var value = left + Math.pow(2, 32) * right;\n      this._offset += 8;\n      return value;\n    }\n  }, {\n    key: \"_nextInt32\",\n    value: function _nextInt32() {\n      var value = this._dataView.getInt32(this._offset, this._littleEndian);\n      this._offset += 4;\n      return value;\n    }\n  }, {\n    key: \"_nextUint8Array\",\n    value: function _nextUint8Array(len) {\n      var value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._offset, len);\n      this._offset += len;\n      return value;\n    }\n  }, {\n    key: \"_skip\",\n    value: function _skip(bytes) {\n      this._offset += bytes;\n      return this;\n    }\n  }, {\n    key: \"_scan\",\n    value: function _scan(maxByteLength, term) {\n      if (term === void 0) {\n        term = 0;\n      }\n      var byteOffset = this._offset;\n      var byteLength = 0;\n      while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n        byteLength++;\n        this._offset++;\n      }\n      if (byteLength < maxByteLength) this._offset++;\n      return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n    }\n  }]);\n  return BufferReader;\n}();\nvar KTX2_ID = [\n// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n171, 75, 84, 88, 32, 50, 48, 187, 13, 10, 26, 10];\nfunction decodeText(buffer) {\n  if (typeof TextDecoder !== \"undefined\") {\n    return new TextDecoder().decode(buffer);\n  }\n  return Buffer.from(buffer).toString(\"utf8\");\n}\nfunction read(data) {\n  var id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n  if (id[0] !== KTX2_ID[0] ||\n  // '´'\n  id[1] !== KTX2_ID[1] ||\n  // 'K'\n  id[2] !== KTX2_ID[2] ||\n  // 'T'\n  id[3] !== KTX2_ID[3] ||\n  // 'X'\n  id[4] !== KTX2_ID[4] ||\n  // ' '\n  id[5] !== KTX2_ID[5] ||\n  // '2'\n  id[6] !== KTX2_ID[6] ||\n  // '0'\n  id[7] !== KTX2_ID[7] ||\n  // 'ª'\n  id[8] !== KTX2_ID[8] ||\n  // '\\r'\n  id[9] !== KTX2_ID[9] ||\n  // '\\n'\n  id[10] !== KTX2_ID[10] ||\n  // '\\x1A'\n  id[11] !== KTX2_ID[11]) {\n    throw new Error(\"Missing KTX 2.0 identifier.\");\n  }\n  var container = new KTX2Container();\n  var headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n  var headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n  container.vkFormat = headerReader._nextUint32();\n  container.typeSize = headerReader._nextUint32();\n  container.pixelWidth = headerReader._nextUint32();\n  container.pixelHeight = headerReader._nextUint32();\n  container.pixelDepth = headerReader._nextUint32();\n  container.layerCount = headerReader._nextUint32();\n  container.faceCount = headerReader._nextUint32();\n  var levelCount = headerReader._nextUint32();\n  container.supercompressionScheme = headerReader._nextUint32();\n  var dfdByteOffset = headerReader._nextUint32();\n  var dfdByteLength = headerReader._nextUint32();\n  var kvdByteOffset = headerReader._nextUint32();\n  var kvdByteLength = headerReader._nextUint32();\n  var sgdByteOffset = headerReader._nextUint64();\n  var sgdByteLength = headerReader._nextUint64();\n  var levelByteLength = levelCount * 3 * 8;\n  var levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n  for (var i = 0; i < levelCount; i++) {\n    container.levels.push({\n      levelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n      uncompressedByteLength: levelReader._nextUint64()\n    });\n  }\n  var dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n  var dfd = {\n    vendorId: dfdReader._skip(4\n    /* totalSize */)._nextUint16(),\n    descriptorType: dfdReader._nextUint16(),\n    versionNumber: dfdReader._nextUint16(),\n    descriptorBlockSize: dfdReader._nextUint16(),\n    colorModel: dfdReader._nextUint8(),\n    colorPrimaries: dfdReader._nextUint8(),\n    transferFunction: dfdReader._nextUint8(),\n    flags: dfdReader._nextUint8(),\n    texelBlockDimension: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    bytesPlane: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    samples: []\n  };\n  var sampleStart = 6;\n  var sampleWords = 4;\n  var numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n  for (var _i = 0; _i < numSamples; _i++) {\n    var sample = {\n      bitOffset: dfdReader._nextUint16(),\n      bitLength: dfdReader._nextUint8(),\n      channelType: dfdReader._nextUint8(),\n      samplePosition: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n      sampleLower: -Infinity,\n      sampleUpper: Infinity\n    };\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      sample.sampleLower = dfdReader._nextInt32();\n      sample.sampleUpper = dfdReader._nextInt32();\n    } else {\n      sample.sampleLower = dfdReader._nextUint32();\n      sample.sampleUpper = dfdReader._nextUint32();\n    }\n    dfd.samples[_i] = sample;\n  }\n  container.dataFormatDescriptor.length = 0;\n  container.dataFormatDescriptor.push(dfd);\n  var kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n  while (kvdReader._offset < kvdByteLength) {\n    var keyValueByteLength = kvdReader._nextUint32();\n    var keyData = kvdReader._scan(keyValueByteLength);\n    var key = decodeText(keyData);\n    container.keyValue[key] = kvdReader._nextUint8Array(keyValueByteLength - keyData.byteLength - 1);\n    if (key.match(/^ktx/i)) {\n      var text = decodeText(container.keyValue[key]);\n      container.keyValue[key] = text.substring(0, text.lastIndexOf(\"\\0\"));\n    }\n    var kvPadding = keyValueByteLength % 4 ? 4 - keyValueByteLength % 4 : 0;\n    kvdReader._skip(kvPadding);\n  }\n  if (sgdByteLength <= 0) return container;\n  var sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n  var endpointCount = sgdReader._nextUint16();\n  var selectorCount = sgdReader._nextUint16();\n  var endpointsByteLength = sgdReader._nextUint32();\n  var selectorsByteLength = sgdReader._nextUint32();\n  var tablesByteLength = sgdReader._nextUint32();\n  var extendedByteLength = sgdReader._nextUint32();\n  var imageDescs = [];\n  for (var _i2 = 0; _i2 < levelCount; _i2++) {\n    imageDescs.push({\n      imageFlags: sgdReader._nextUint32(),\n      rgbSliceByteOffset: sgdReader._nextUint32(),\n      rgbSliceByteLength: sgdReader._nextUint32(),\n      alphaSliceByteOffset: sgdReader._nextUint32(),\n      alphaSliceByteLength: sgdReader._nextUint32()\n    });\n  }\n  var endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n  var selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n  var tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n  var extendedByteOffset = tablesByteOffset + tablesByteLength;\n  var endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n  var selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n  var tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n  var extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n  container.globalData = {\n    endpointCount: endpointCount,\n    selectorCount: selectorCount,\n    imageDescs: imageDescs,\n    endpointsData: endpointsData,\n    selectorsData: selectorsData,\n    tablesData: tablesData,\n    extendedData: extendedData\n  };\n  return container;\n}\nexport { KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_FLAG_ALPHA_STRAIGHT, KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_MODEL_UNSPECIFIED, KHR_DF_PRIMARIES_BT709, KHR_DF_SAMPLE_DATATYPE_SIGNED, KHR_DF_TRANSFER_SRGB, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, KTX2Container, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_UNDEFINED, read };\n//# sourceMappingURL=ktx-parse.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}