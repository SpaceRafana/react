{"ast":null,"code":"import _regeneratorRuntime from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(path);\n        case 2:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 7;\n            break;\n          }\n          throw new Error(response.statusText);\n        case 7:\n          return _context.abrupt(\"return\", response.json());\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (basePath) {\n            _context2.next = 2;\n            break;\n          }\n          throw new Error(\"No basePath supplied\");\n        case 2:\n          profileListFileName = \"profilesList.json\";\n          _context2.next = 5;\n          return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n        case 5:\n          profilesList = _context2.sent;\n          return _context2.abrupt(\"return\", profilesList);\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n}\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n      getAssetPath,\n      supportedProfilesList,\n      match,\n      supportedProfile,\n      profile,\n      assetPath,\n      layout,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n          getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n          if (xrInputSource) {\n            _context3.next = 4;\n            break;\n          }\n          throw new Error(\"No xrInputSource supplied\");\n        case 4:\n          if (basePath) {\n            _context3.next = 6;\n            break;\n          }\n          throw new Error(\"No basePath supplied\");\n        case 6:\n          _context3.next = 8;\n          return fetchProfilesList(basePath);\n        case 8:\n          supportedProfilesList = _context3.sent;\n          match = void 0;\n          xrInputSource.profiles.some(function (profileId) {\n            var supportedProfile = supportedProfilesList[profileId];\n            if (supportedProfile) {\n              match = {\n                profileId: profileId,\n                profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                deprecated: !!supportedProfile.deprecated\n              };\n            }\n            return !!match;\n          });\n          if (match) {\n            _context3.next = 18;\n            break;\n          }\n          if (defaultProfile) {\n            _context3.next = 14;\n            break;\n          }\n          throw new Error(\"No matching profile name found\");\n        case 14:\n          supportedProfile = supportedProfilesList[defaultProfile];\n          if (supportedProfile) {\n            _context3.next = 17;\n            break;\n          }\n          throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n        case 17:\n          match = {\n            profileId: defaultProfile,\n            profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n            deprecated: !!supportedProfile.deprecated\n          };\n        case 18:\n          _context3.next = 20;\n          return fetchJsonFile(match.profilePath);\n        case 20:\n          profile = _context3.sent;\n          assetPath = void 0;\n          if (!getAssetPath) {\n            _context3.next = 27;\n            break;\n          }\n          if (xrInputSource.handedness === \"any\") {\n            layout = profile.layouts[Object.keys(profile.layouts)[0]];\n          } else {\n            layout = profile.layouts[xrInputSource.handedness];\n          }\n          if (layout) {\n            _context3.next = 26;\n            break;\n          }\n          throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n        case 26:\n          if (layout.assetPath) {\n            assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n          }\n        case 27:\n          return _context3.abrupt(\"return\", {\n            profile: profile,\n            assetPath: assetPath\n          });\n        case 28:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y;\n  var hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n        yAxis = _ref.yAxis,\n        button = _ref.button,\n        state = _ref.state;\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n        normalizedXAxis = _normalizeAxes.normalizedXAxis,\n        normalizedYAxis = _normalizeAxes.normalizedYAxis;\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) && button ? button : 0;\n          break;\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1 : 0;\n          }\n          break;\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n  return VisualResponse;\n}();\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n    _classCallCheck(this, Component);\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  _createClass(Component, [{\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n      if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button;\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n      if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n      if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }]);\n  return Component;\n}();\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n    _classCallCheck(this, MotionController);\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  _createClass(MotionController, [{\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad() {\n      var _this4 = this;\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }]);\n  return MotionController;\n}();\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };\n//# sourceMappingURL=MotionControllers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}