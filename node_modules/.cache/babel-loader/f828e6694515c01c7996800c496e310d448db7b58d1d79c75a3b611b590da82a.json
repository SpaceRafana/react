{"ast":null,"code":"import _slicedToArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useReducer, useRef, useDebugValue, useEffect, useLayoutEffect } from 'react';\nfunction createStore(createState) {\n  var state;\n  var listeners = /* @__PURE__ */new Set();\n  var setState = function setState(partial, replace) {\n    var nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (nextState !== state) {\n      var previousState = state;\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(function (listener) {\n        return listener(state, previousState);\n      });\n    }\n  };\n  var getState = function getState() {\n    return state;\n  };\n  var subscribeWithSelector = function subscribeWithSelector(listener) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getState;\n    var equalityFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.is;\n    console.warn(\"[DEPRECATED] Please use `subscribeWithSelector` middleware\");\n    var currentSlice = selector(state);\n    function listenerToAdd() {\n      var nextSlice = selector(state);\n      if (!equalityFn(currentSlice, nextSlice)) {\n        var previousSlice = currentSlice;\n        listener(currentSlice = nextSlice, previousSlice);\n      }\n    }\n    listeners.add(listenerToAdd);\n    return function () {\n      return listeners.delete(listenerToAdd);\n    };\n  };\n  var subscribe = function subscribe(listener, selector, equalityFn) {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n    listeners.add(listener);\n    return function () {\n      return listeners.delete(listener);\n    };\n  };\n  var destroy = function destroy() {\n    return listeners.clear();\n  };\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: subscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n}\nvar isSSR = typeof window === \"undefined\" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nvar useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\nfunction create(createState) {\n  var api = typeof createState === \"function\" ? createStore(createState) : createState;\n  var useStore = function useStore() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : api.getState;\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.is;\n    var _useReducer = useReducer(function (c) {\n        return c + 1;\n      }, 0),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      forceUpdate = _useReducer2[1];\n    var state = api.getState();\n    var stateRef = useRef(state);\n    var selectorRef = useRef(selector);\n    var equalityFnRef = useRef(equalityFn);\n    var erroredRef = useRef(false);\n    var currentSliceRef = useRef();\n    if (currentSliceRef.current === void 0) {\n      currentSliceRef.current = selector(state);\n    }\n    var newStateSlice;\n    var hasNewStateSlice = false;\n    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    }\n    useIsomorphicLayoutEffect(function () {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n      stateRef.current = state;\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    var stateBeforeSubscriptionRef = useRef(state);\n    useIsomorphicLayoutEffect(function () {\n      var listener = function listener() {\n        try {\n          var nextState = api.getState();\n          var nextStateSlice = selectorRef.current(nextState);\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            stateRef.current = nextState;\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n      var unsubscribe = api.subscribe(listener);\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener();\n      }\n      return unsubscribe;\n    }, []);\n    var sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n    useDebugValue(sliceToReturn);\n    return sliceToReturn;\n  };\n  Object.assign(useStore, api);\n  useStore[Symbol.iterator] = function () {\n    console.warn(\"[useStore, api] = create() is deprecated and will be removed in v4\");\n    var items = [useStore, api];\n    return {\n      next: function next() {\n        var done = items.length <= 0;\n        return {\n          value: items.shift(),\n          done: done\n        };\n      }\n    };\n  };\n  return useStore;\n}\nexport { create as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}