{"ast":null,"code":"import { WebGLCubeRenderTarget, CubeCamera } from 'three';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nfunction Preload(_ref) {\n  var all = _ref.all,\n    scene = _ref.scene,\n    camera = _ref.camera;\n  var gl = useThree(function (_ref2) {\n    var gl = _ref2.gl;\n    return gl;\n  });\n  var dCamera = useThree(function (_ref3) {\n    var camera = _ref3.camera;\n    return camera;\n  });\n  var dScene = useThree(function (_ref4) {\n    var scene = _ref4.scene;\n    return scene;\n  });\n\n  // Layout effect because it must run before React commits\n  React.useLayoutEffect(function () {\n    var invisible = [];\n    if (all) {\n      (scene || dScene).traverse(function (object) {\n        if (object.visible === false) {\n          invisible.push(object);\n          object.visible = true;\n        }\n      });\n    }\n    // Now compile the scene\n    gl.compile(scene || dScene, camera || dCamera);\n    // And for good measure, hit it with a cube camera\n    var cubeRenderTarget = new WebGLCubeRenderTarget(128);\n    var cubeCamera = new CubeCamera(0.01, 100000, cubeRenderTarget);\n    cubeCamera.update(gl, scene || dScene);\n    cubeRenderTarget.dispose();\n    // Flips these objects back\n    invisible.forEach(function (object) {\n      return object.visible = false;\n    });\n  }, []);\n  return null;\n}\nexport { Preload };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}