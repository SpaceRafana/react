{"ast":null,"code":"import MaterialNode from './MaterialNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { normalMap } from '../display/NormalMapNode.js';\nimport { bumpMap } from '../display/BumpMapNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass ExtendedMaterialNode extends MaterialNode {\n  constructor(scope) {\n    super(scope);\n  }\n  getNodeType(builder) {\n    const scope = this.scope;\n    let type = null;\n    if (scope === ExtendedMaterialNode.NORMAL || scope === ExtendedMaterialNode.CLEARCOAT_NORMAL) {\n      type = 'vec3';\n    }\n    return type || super.getNodeType(builder);\n  }\n  setup(builder) {\n    const material = builder.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === ExtendedMaterialNode.NORMAL) {\n      if (material.normalMap) {\n        node = normalMap(this.getTexture('normalMap'), materialReference('normalScale', 'vec2'));\n      } else if (material.bumpMap) {\n        // @TODO: Replace material.bumpMap to this.getTexture( 'bumpMap' )\n        node = bumpMap(material.bumpMap, materialReference('bumpScale', 'float'));\n      } else {\n        node = normalView;\n      }\n    } else if (scope === ExtendedMaterialNode.CLEARCOAT_NORMAL) {\n      node = material.clearcoatNormalMap ? normalMap(this.getTexture('clearcoatNormalMap'), materialReference('clearcoatNormalScale', 'vec2')) : normalView;\n    }\n    return node || super.setup(builder);\n  }\n}\nExtendedMaterialNode.NORMAL = 'normal';\nExtendedMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nexport default ExtendedMaterialNode;\nexport const materialNormal = nodeImmutable(ExtendedMaterialNode, ExtendedMaterialNode.NORMAL);\nexport const materialClearcoatNormal = nodeImmutable(ExtendedMaterialNode, ExtendedMaterialNode.CLEARCOAT_NORMAL);\naddNodeClass('ExtendedMaterialNode', ExtendedMaterialNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}