{"ast":null,"code":"import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { materialLineDashSize, materialLineGapSize, materialLineScale } from '../accessors/LineMaterialNode.js';\nimport { dashSize, gapSize } from '../core/PropertyNode.js';\nimport { float } from '../shadernode/ShaderNode.js';\nimport { LineDashedMaterial } from 'three';\nconst defaultValues = new LineDashedMaterial();\nclass LineDashedNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isLineDashedNodeMaterial = true;\n    this.lights = false;\n    this.normals = false;\n    this.setDefaultValues(defaultValues);\n    this.offsetNode = null;\n    this.dashScaleNode = null;\n    this.dashSizeNode = null;\n    this.gapSizeNode = null;\n    this.setValues(parameters);\n  }\n  setupVariants({\n    stack\n  }) {\n    const offsetNode = this.offsetNode;\n    const dashScaleNode = this.dashScaleNode ? float(this.dashScaleNode) : materialLineScale;\n    const dashSizeNode = this.dashSizeNode ? float(this.dashSizeNode) : materialLineDashSize;\n    const gapSizeNode = this.dashSizeNode ? float(this.dashGapNode) : materialLineGapSize;\n    stack.assign(dashSize, dashSizeNode);\n    stack.assign(gapSize, gapSizeNode);\n    const vLineDistance = varying(attribute('lineDistance').mul(dashScaleNode));\n    const vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;\n    stack.add(vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard());\n  }\n}\nexport default LineDashedNodeMaterial;\naddNodeMaterial('LineDashedNodeMaterial', LineDashedNodeMaterial);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}