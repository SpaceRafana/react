{"ast":null,"code":"import { Vector2 } from \"three\";\nvar ConvolutionShader = {\n  defines: {\n    KERNEL_SIZE_FLOAT: \"25.0\",\n    KERNEL_SIZE_INT: \"25\"\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    uImageIncrement: {\n      value: new Vector2(1953125e-9, 0)\n    },\n    cKernel: {\n      value: []\n    }\n  },\n  vertexShader: [\"uniform vec2 uImageIncrement;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float cKernel[ KERNEL_SIZE_INT ];\", \"uniform sampler2D tDiffuse;\", \"uniform vec2 uImageIncrement;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 imageCoord = vUv;\", \"\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\", \"\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\", \"\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\", \"\t\timageCoord += uImageIncrement;\", \"\t}\", \"\tgl_FragColor = sum;\", \"}\"].join(\"\\n\"),\n  buildKernel: function buildKernel(sigma) {\n    function gauss(x, sigma2) {\n      return Math.exp(-(x * x) / (2 * sigma2 * sigma2));\n    }\n    var kMaxKernelSize = 25;\n    var kernelSize = Math.min(2 * Math.ceil(sigma * 3) + 1, kMaxKernelSize);\n    var halfWidth = (kernelSize - 1) * 0.5;\n    var values = new Array(kernelSize);\n    var sum = 0;\n    for (var i = 0; i < kernelSize; ++i) {\n      values[i] = gauss(i - halfWidth, sigma);\n      sum += values[i];\n    }\n    for (var _i = 0; _i < kernelSize; ++_i) values[_i] /= sum;\n    return values;\n  }\n};\nexport { ConvolutionShader };\n//# sourceMappingURL=ConvolutionShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}