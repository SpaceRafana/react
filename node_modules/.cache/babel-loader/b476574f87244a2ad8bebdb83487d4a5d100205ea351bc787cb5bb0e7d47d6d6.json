{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { property } from '../core/PropertyNode.js';\nimport { context as contextNode } from '../core/ContextNode.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nclass CondNode extends Node {\n  constructor(condNode, ifNode, elseNode = null) {\n    super();\n    this.condNode = condNode;\n    this.ifNode = ifNode;\n    this.elseNode = elseNode;\n  }\n  getNodeType(builder) {\n    const ifType = this.ifNode.getNodeType(builder);\n    if (this.elseNode !== null) {\n      const elseType = this.elseNode.getNodeType(builder);\n      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n        return elseType;\n      }\n    }\n    return ifType;\n  }\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const context = {\n      tempWrite: false\n    };\n    const {\n      ifNode,\n      elseNode\n    } = this;\n    const needsProperty = ifNode.getNodeType(builder) !== 'void' || elseNode && elseNode.getNodeType(builder) !== 'void';\n    const nodeProperty = needsProperty ? property(type).build(builder) : '';\n    const nodeSnippet = contextNode(this.condNode /*, context*/).build(builder, 'bool');\n    builder.addFlowCode(`\\n${builder.tab}if ( ${nodeSnippet} ) {\\n\\n`).addFlowTab();\n    let ifSnippet = contextNode(this.ifNode, context).build(builder, type);\n    ifSnippet = needsProperty ? nodeProperty + ' = ' + ifSnippet + ';' : ifSnippet;\n    builder.removeFlowTab().addFlowCode(builder.tab + '\\t' + ifSnippet + '\\n\\n' + builder.tab + '}');\n    if (elseNode !== null) {\n      builder.addFlowCode(' else {\\n\\n').addFlowTab();\n      let elseSnippet = contextNode(elseNode, context).build(builder, type);\n      elseSnippet = nodeProperty ? nodeProperty + ' = ' + elseSnippet + ';' : elseSnippet;\n      builder.removeFlowTab().addFlowCode(builder.tab + '\\t' + elseSnippet + '\\n\\n' + builder.tab + '}\\n\\n');\n    } else {\n      builder.addFlowCode('\\n\\n');\n    }\n    return nodeProperty;\n  }\n}\nexport default CondNode;\nexport const cond = nodeProxy(CondNode);\naddNodeElement('cond', cond);\naddNodeClass('CondNode', CondNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}