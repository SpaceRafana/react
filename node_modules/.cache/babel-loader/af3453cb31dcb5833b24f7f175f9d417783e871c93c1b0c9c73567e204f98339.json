{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './NormalNode.js';\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './TangentNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass BitangentNode extends Node {\n  constructor(scope = BitangentNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n  getHash( /*builder*/\n  ) {\n    return `bitangent-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let crossNormalTangent;\n    if (scope === BitangentNode.GEOMETRY) {\n      crossNormalTangent = normalGeometry.cross(tangentGeometry);\n    } else if (scope === BitangentNode.LOCAL) {\n      crossNormalTangent = normalLocal.cross(tangentLocal);\n    } else if (scope === BitangentNode.VIEW) {\n      crossNormalTangent = normalView.cross(tangentView);\n    } else if (scope === BitangentNode.WORLD) {\n      crossNormalTangent = normalWorld.cross(tangentWorld);\n    }\n    const vertexNode = crossNormalTangent.mul(tangentGeometry.w).xyz;\n    const outputNode = normalize(varying(vertexNode));\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nBitangentNode.GEOMETRY = 'geometry';\nBitangentNode.LOCAL = 'local';\nBitangentNode.VIEW = 'view';\nBitangentNode.WORLD = 'world';\nexport default BitangentNode;\nexport const bitangentGeometry = nodeImmutable(BitangentNode, BitangentNode.GEOMETRY);\nexport const bitangentLocal = nodeImmutable(BitangentNode, BitangentNode.LOCAL);\nexport const bitangentView = nodeImmutable(BitangentNode, BitangentNode.VIEW);\nexport const bitangentWorld = nodeImmutable(BitangentNode, BitangentNode.WORLD);\nexport const transformedBitangentView = normalize(transformedNormalView.cross(transformedTangentView).mul(tangentGeometry.w));\nexport const transformedBitangentWorld = normalize(transformedBitangentView.transformDirection(cameraViewMatrix));\naddNodeClass('BitangentNode', BitangentNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}