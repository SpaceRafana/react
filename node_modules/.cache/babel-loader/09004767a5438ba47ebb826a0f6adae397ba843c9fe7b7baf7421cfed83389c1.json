{"ast":null,"code":"import _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"stops\", \"colors\", \"size\", \"width\", \"type\", \"innerCircleRadius\", \"outerCircleRadius\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nvar GradientType = /*#__PURE__*/function (GradientType) {\n  GradientType[\"Linear\"] = \"linear\";\n  GradientType[\"Radial\"] = \"radial\";\n  return GradientType;\n}({});\nfunction GradientTexture(_ref) {\n  var stops = _ref.stops,\n    colors = _ref.colors,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 1024 : _ref$size,\n    _ref$width = _ref.width,\n    width = _ref$width === void 0 ? 16 : _ref$width,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? GradientType.Linear : _ref$type,\n    _ref$innerCircleRadiu = _ref.innerCircleRadius,\n    innerCircleRadius = _ref$innerCircleRadiu === void 0 ? 0 : _ref$innerCircleRadiu,\n    _ref$outerCircleRadiu = _ref.outerCircleRadius,\n    outerCircleRadius = _ref$outerCircleRadiu === void 0 ? 'auto' : _ref$outerCircleRadiu,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var canvas = React.useMemo(function () {\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    canvas.width = width;\n    canvas.height = size;\n    var gradient;\n    if (type === GradientType.Linear) {\n      gradient = context.createLinearGradient(0, 0, 0, size);\n    } else {\n      var canvasCenterX = canvas.width / 2;\n      var canvasCenterY = canvas.height / 2;\n      var radius = outerCircleRadius !== 'auto' ? Math.abs(Number(outerCircleRadius)) : Math.sqrt(Math.pow(canvasCenterX, 2) + Math.pow(canvasCenterY, 2));\n      gradient = context.createRadialGradient(canvasCenterX, canvasCenterY, Math.abs(innerCircleRadius), canvasCenterX, canvasCenterY, radius);\n    }\n    var i = stops.length;\n    while (i--) {\n      gradient.addColorStop(stops[i], colors[i]);\n    }\n    context.save();\n    context.fillStyle = gradient;\n    context.fillRect(0, 0, width, size);\n    context.restore();\n    return canvas;\n  }, [stops]);\n\n  // @ts-ignore ????\n  return /*#__PURE__*/React.createElement(\"canvasTexture\", _extends({\n    colorSpace: gl.outputColorSpace,\n    args: [canvas],\n    attach: \"map\"\n  }, props));\n}\nexport { GradientTexture, GradientType };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}