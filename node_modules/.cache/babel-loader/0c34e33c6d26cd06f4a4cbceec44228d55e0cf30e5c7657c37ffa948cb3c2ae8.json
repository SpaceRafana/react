{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { temp } from '../core/VarNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelViewMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass TangentNode extends Node {\n  constructor(scope = TangentNode.LOCAL) {\n    super();\n    this.scope = scope;\n  }\n  getHash( /*builder*/\n  ) {\n    return `tangent-${this.scope}`;\n  }\n  getNodeType() {\n    const scope = this.scope;\n    if (scope === TangentNode.GEOMETRY) {\n      return 'vec4';\n    }\n    return 'vec3';\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === TangentNode.GEOMETRY) {\n      outputNode = attribute('tangent', 'vec4');\n    } else if (scope === TangentNode.LOCAL) {\n      outputNode = varying(tangentGeometry.xyz);\n    } else if (scope === TangentNode.VIEW) {\n      const vertexNode = modelViewMatrix.mul(tangentLocal).xyz;\n      outputNode = normalize(varying(vertexNode));\n    } else if (scope === TangentNode.WORLD) {\n      const vertexNode = tangentView.transformDirection(cameraViewMatrix);\n      outputNode = normalize(varying(vertexNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nTangentNode.GEOMETRY = 'geometry';\nTangentNode.LOCAL = 'local';\nTangentNode.VIEW = 'view';\nTangentNode.WORLD = 'world';\nexport default TangentNode;\nexport const tangentGeometry = nodeImmutable(TangentNode, TangentNode.GEOMETRY);\nexport const tangentLocal = nodeImmutable(TangentNode, TangentNode.LOCAL);\nexport const tangentView = nodeImmutable(TangentNode, TangentNode.VIEW);\nexport const tangentWorld = nodeImmutable(TangentNode, TangentNode.WORLD);\nexport const transformedTangentView = temp(tangentView, 'TransformedTangentView');\nexport const transformedTangentWorld = normalize(transformedTangentView.transformDirection(cameraViewMatrix));\naddNodeClass('TangentNode', TangentNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}