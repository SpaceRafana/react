{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { property } from '../core/PropertyNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { modelNormalMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass NormalNode extends Node {\n  constructor(scope = NormalNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash( /*builder*/\n  ) {\n    return `normal-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === NormalNode.GEOMETRY) {\n      outputNode = attribute('normal', 'vec3');\n    } else if (scope === NormalNode.LOCAL) {\n      outputNode = varying(normalGeometry);\n    } else if (scope === NormalNode.VIEW) {\n      const vertexNode = modelNormalMatrix.mul(normalLocal);\n      outputNode = normalize(varying(vertexNode));\n    } else if (scope === NormalNode.WORLD) {\n      // To use inverseTransformDirection only inverse the param order like this: cameraViewMatrix.transformDirection( normalView )\n      const vertexNode = normalView.transformDirection(cameraViewMatrix);\n      outputNode = normalize(varying(vertexNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nNormalNode.GEOMETRY = 'geometry';\nNormalNode.LOCAL = 'local';\nNormalNode.VIEW = 'view';\nNormalNode.WORLD = 'world';\nexport default NormalNode;\nexport const normalGeometry = nodeImmutable(NormalNode, NormalNode.GEOMETRY);\nexport const normalLocal = nodeImmutable(NormalNode, NormalNode.LOCAL);\nexport const normalView = nodeImmutable(NormalNode, NormalNode.VIEW);\nexport const normalWorld = nodeImmutable(NormalNode, NormalNode.WORLD);\nexport const transformedNormalView = property('vec3', 'TransformedNormalView');\nexport const transformedNormalWorld = transformedNormalView.transformDirection(cameraViewMatrix).normalize();\nexport const transformedClearcoatNormalView = property('vec3', 'TransformedClearcoatNormalView');\naddNodeClass('NormalNode', NormalNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}