{"ast":null,"code":"import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris(bvh, side, ray, offset, count, intersections) {\n  var geometry = bvh.geometry,\n    _indirectBuffer = bvh._indirectBuffer;\n  for (var i = offset, end = offset + count; i < end; i++) {\n    intersectTri(geometry, side, ray, i, intersections);\n  }\n}\nfunction intersectClosestTri(bvh, side, ray, offset, count) {\n  var geometry = bvh.geometry,\n    _indirectBuffer = bvh._indirectBuffer;\n  var dist = Infinity;\n  var res = null;\n  for (var i = offset, end = offset + count; i < end; i++) {\n    var intersection = void 0;\n    intersection = intersectTri(geometry, side, ray, i);\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n  return res;\n}\nfunction iterateOverTriangles(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n  var geometry = bvh.geometry;\n  var index = geometry.index;\n  var pos = geometry.attributes.position;\n  for (var i = offset, l = count + offset; i < l; i++) {\n    var tri = void 0;\n    tri = i;\n    setTriangle(triangle, tri * 3, index, pos);\n    triangle.needsUpdate = true;\n    if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n      return true;\n    }\n  }\n  return false;\n}\nexport { intersectClosestTri, intersectTris, iterateOverTriangles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}