{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Object3D, Box3, AnimationMixer, MeshLambertMaterial, Mesh, TextureLoader, UVMapping } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nvar MD2Character = /*#__PURE__*/function () {\n  function MD2Character() {\n    _classCallCheck(this, MD2Character);\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.activeAnimation = null;\n    this.mixer = null;\n    this.onLoadComplete = function () {};\n    this.loadCounter = 0;\n  }\n  _createClass(MD2Character, [{\n    key: \"loadParts\",\n    value: function loadParts(config) {\n      var scope = this;\n      function createPart(geometry, skinMap) {\n        var materialWireframe = new MeshLambertMaterial({\n          color: 16755200,\n          wireframe: true,\n          morphTargets: true,\n          morphNormals: true\n        });\n        var materialTexture = new MeshLambertMaterial({\n          color: 16777215,\n          wireframe: false,\n          map: skinMap,\n          morphTargets: true,\n          morphNormals: true\n        });\n        var mesh = new Mesh(geometry, materialTexture);\n        mesh.rotation.y = -Math.PI / 2;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        mesh.materialTexture = materialTexture;\n        mesh.materialWireframe = materialWireframe;\n        return mesh;\n      }\n      function loadTextures(baseUrl, textureUrls) {\n        var textureLoader = new TextureLoader();\n        var textures = [];\n        for (var i = 0; i < textureUrls.length; i++) {\n          textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n          textures[i].mapping = UVMapping;\n          textures[i].name = textureUrls[i];\n          if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n        }\n        return textures;\n      }\n      function checkLoadingComplete() {\n        scope.loadCounter -= 1;\n        if (scope.loadCounter === 0) scope.onLoadComplete();\n      }\n      this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n      var weaponsTextures = [];\n      for (var i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n      this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n      this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n      var loader = new MD2Loader();\n      loader.load(config.baseUrl + config.body, function (geo) {\n        var boundingBox = new Box3();\n        boundingBox.setFromBufferAttribute(geo.attributes.position);\n        scope.root.position.y = -scope.scale * boundingBox.min.y;\n        var mesh = createPart(geo, scope.skinsBody[0]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        scope.root.add(mesh);\n        scope.meshBody = mesh;\n        scope.meshBody.clipOffset = 0;\n        scope.activeAnimationClipName = mesh.geometry.animations[0].name;\n        scope.mixer = new AnimationMixer(mesh);\n        checkLoadingComplete();\n      });\n      var generateCallback = function generateCallback(index, name) {\n        return function (geo) {\n          var mesh = createPart(geo, scope.skinsWeapon[index]);\n          mesh.scale.set(scope.scale, scope.scale, scope.scale);\n          mesh.visible = false;\n          mesh.name = name;\n          scope.root.add(mesh);\n          scope.weapons[index] = mesh;\n          scope.meshWeapon = mesh;\n          checkLoadingComplete();\n        };\n      };\n      for (var _i = 0; _i < config.weapons.length; _i++) {\n        loader.load(config.baseUrl + config.weapons[_i][0], generateCallback(_i, config.weapons[_i][0]));\n      }\n    }\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(rate) {\n      if (rate !== 0) {\n        this.mixer.timeScale = 1 / rate;\n      } else {\n        this.mixer.timeScale = 0;\n      }\n    }\n  }, {\n    key: \"setWireframe\",\n    value: function setWireframe(wireframeEnabled) {\n      if (wireframeEnabled) {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n      } else {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n      }\n    }\n  }, {\n    key: \"setSkin\",\n    value: function setSkin(index) {\n      if (this.meshBody && this.meshBody.material.wireframe === false) {\n        this.meshBody.material.map = this.skinsBody[index];\n      }\n    }\n  }, {\n    key: \"setWeapon\",\n    value: function setWeapon(index) {\n      for (var i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n      var activeWeapon = this.weapons[index];\n      if (activeWeapon) {\n        activeWeapon.visible = true;\n        this.meshWeapon = activeWeapon;\n        this.syncWeaponAnimation();\n      }\n    }\n  }, {\n    key: \"setAnimation\",\n    value: function setAnimation(clipName) {\n      if (this.meshBody) {\n        if (this.meshBody.activeAction) {\n          this.meshBody.activeAction.stop();\n          this.meshBody.activeAction = null;\n        }\n        var action = this.mixer.clipAction(clipName, this.meshBody);\n        if (action) {\n          this.meshBody.activeAction = action.play();\n        }\n      }\n      this.activeClipName = clipName;\n      this.syncWeaponAnimation();\n    }\n  }, {\n    key: \"syncWeaponAnimation\",\n    value: function syncWeaponAnimation() {\n      var clipName = this.activeClipName;\n      if (this.meshWeapon) {\n        if (this.meshWeapon.activeAction) {\n          this.meshWeapon.activeAction.stop();\n          this.meshWeapon.activeAction = null;\n        }\n        var action = this.mixer.clipAction(clipName, this.meshWeapon);\n        if (action) {\n          this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this.mixer) this.mixer.update(delta);\n    }\n  }]);\n  return MD2Character;\n}();\nexport { MD2Character };\n//# sourceMappingURL=MD2Character.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}