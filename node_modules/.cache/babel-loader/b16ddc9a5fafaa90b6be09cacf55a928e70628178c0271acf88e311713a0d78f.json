{"ast":null,"code":"import _toArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"font\", \"letterSpacing\", \"lineHeight\", \"size\", \"height\", \"bevelThickness\", \"bevelSize\", \"bevelEnabled\", \"bevelOffset\", \"bevelSegments\", \"curveSegments\", \"smooth\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { TextGeometry, mergeVertices } from 'three-stdlib';\nimport { useFont } from './useFont.js';\nvar types = ['string', 'number'];\nvar getTextFromChildren = function getTextFromChildren(children) {\n  var label = '';\n  var rest = [];\n  React.Children.forEach(children, function (child) {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label].concat(rest);\n};\nvar Text3D = /* @__PURE__ */React.forwardRef(function (_ref, fref) {\n  var _font = _ref.font,\n    _ref$letterSpacing = _ref.letterSpacing,\n    letterSpacing = _ref$letterSpacing === void 0 ? 0 : _ref$letterSpacing,\n    _ref$lineHeight = _ref.lineHeight,\n    lineHeight = _ref$lineHeight === void 0 ? 1 : _ref$lineHeight,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 1 : _ref$size,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? 0.2 : _ref$height,\n    _ref$bevelThickness = _ref.bevelThickness,\n    bevelThickness = _ref$bevelThickness === void 0 ? 0.1 : _ref$bevelThickness,\n    _ref$bevelSize = _ref.bevelSize,\n    bevelSize = _ref$bevelSize === void 0 ? 0.01 : _ref$bevelSize,\n    _ref$bevelEnabled = _ref.bevelEnabled,\n    bevelEnabled = _ref$bevelEnabled === void 0 ? false : _ref$bevelEnabled,\n    _ref$bevelOffset = _ref.bevelOffset,\n    bevelOffset = _ref$bevelOffset === void 0 ? 0 : _ref$bevelOffset,\n    _ref$bevelSegments = _ref.bevelSegments,\n    bevelSegments = _ref$bevelSegments === void 0 ? 4 : _ref$bevelSegments,\n    _ref$curveSegments = _ref.curveSegments,\n    curveSegments = _ref$curveSegments === void 0 ? 8 : _ref$curveSegments,\n    smooth = _ref.smooth,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  React.useMemo(function () {\n    return extend({\n      RenamedTextGeometry: TextGeometry\n    });\n  }, []);\n  var ref = React.useRef(null);\n  var font = useFont(_font);\n  var opts = useMemo(function () {\n    return {\n      font: font,\n      size: size,\n      height: height,\n      bevelThickness: bevelThickness,\n      bevelSize: bevelSize,\n      bevelEnabled: bevelEnabled,\n      bevelSegments: bevelSegments,\n      bevelOffset: bevelOffset,\n      curveSegments: curveSegments,\n      letterSpacing: letterSpacing,\n      lineHeight: lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n  var _useMemo = useMemo(function () {\n      return getTextFromChildren(children);\n    }, [children]),\n    _useMemo2 = _toArray(_useMemo),\n    label = _useMemo2[0],\n    rest = _useMemo2.slice(1);\n  var args = React.useMemo(function () {\n    return [label, opts];\n  }, [label, opts]);\n  React.useLayoutEffect(function () {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\nexport { Text3D };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}