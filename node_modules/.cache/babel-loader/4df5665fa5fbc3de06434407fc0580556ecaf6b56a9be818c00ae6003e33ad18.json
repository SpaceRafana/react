{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from \"three\";\nvar MDDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MDDLoader, _Loader);\n  var _super = _createSuper(MDDLoader);\n  function MDDLoader(manager) {\n    _classCallCheck(this, MDDLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(MDDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.load(url, function (data) {\n        onLoad(scope.parse(data));\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var view = new DataView(data);\n      var totalFrames = view.getUint32(0);\n      var totalPoints = view.getUint32(4);\n      var offset = 8;\n      var times = new Float32Array(totalFrames);\n      var values = new Float32Array(totalFrames * totalFrames).fill(0);\n      for (var i = 0; i < totalFrames; i++) {\n        times[i] = view.getFloat32(offset);\n        offset += 4;\n        values[totalFrames * i + i] = 1;\n      }\n      var track = new NumberKeyframeTrack(\".morphTargetInfluences\", times, values);\n      var clip = new AnimationClip(\"default\", times[times.length - 1], [track]);\n      var morphTargets = [];\n      for (var _i = 0; _i < totalFrames; _i++) {\n        var morphTarget = new Float32Array(totalPoints * 3);\n        for (var j = 0; j < totalPoints; j++) {\n          var stride = j * 3;\n          morphTarget[stride + 0] = view.getFloat32(offset);\n          offset += 4;\n          morphTarget[stride + 1] = view.getFloat32(offset);\n          offset += 4;\n          morphTarget[stride + 2] = view.getFloat32(offset);\n          offset += 4;\n        }\n        var attribute = new BufferAttribute(morphTarget, 3);\n        attribute.name = \"morph_\" + _i;\n        morphTargets.push(attribute);\n      }\n      return {\n        morphTargets: morphTargets,\n        clip: clip\n      };\n    }\n  }]);\n  return MDDLoader;\n}(Loader);\nexport { MDDLoader };\n//# sourceMappingURL=MDDLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}