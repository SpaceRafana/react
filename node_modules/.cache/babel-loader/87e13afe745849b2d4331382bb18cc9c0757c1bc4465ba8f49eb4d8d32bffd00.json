{"ast":null,"code":"import InputNode from './InputNode.js';\nimport { addNodeClass } from './Node.js';\nimport { nodeObject, getConstNodeType } from '../shadernode/ShaderNode.js';\nclass UniformNode extends InputNode {\n  constructor(value, nodeType = null) {\n    super(value, nodeType);\n    this.isUniformNode = true;\n  }\n  getUniformHash(builder) {\n    return this.getHash(builder);\n  }\n  generate(builder, output) {\n    const type = this.getNodeType(builder);\n    const hash = this.getUniformHash(builder);\n    let sharedNode = builder.getNodeFromHash(hash);\n    if (sharedNode === undefined) {\n      builder.setHashNode(this, hash);\n      sharedNode = this;\n    }\n    const sharedNodeType = sharedNode.getInputType(builder);\n    const nodeUniform = builder.getUniformFromNode(sharedNode, sharedNodeType, builder.shaderStage, builder.context.label);\n    const propertyName = builder.getPropertyName(nodeUniform);\n    if (builder.context.label !== undefined) delete builder.context.label;\n    return builder.format(propertyName, type, output);\n  }\n}\nexport default UniformNode;\nexport const uniform = (arg1, arg2) => {\n  const nodeType = getConstNodeType(arg2 || arg1);\n\n  // @TODO: get ConstNode from .traverse() in the future\n  const value = arg1 && arg1.isNode === true ? arg1.node && arg1.node.value || arg1.value : arg1;\n  return nodeObject(new UniformNode(value, nodeType));\n};\naddNodeClass('UniformNode', UniformNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}