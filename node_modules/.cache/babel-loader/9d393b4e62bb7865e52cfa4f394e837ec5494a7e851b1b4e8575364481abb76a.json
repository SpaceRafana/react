{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderLib, Mesh, BoxGeometry, ShaderMaterial, UniformsUtils, BackSide, Scene, PerspectiveCamera } from \"three\";\nimport { Pass } from \"./Pass.js\";\nvar CubeTexturePass = /*#__PURE__*/function (_Pass) {\n  _inherits(CubeTexturePass, _Pass);\n  var _super = _createSuper(CubeTexturePass);\n  function CubeTexturePass(camera, tCube) {\n    var _this;\n    var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    _classCallCheck(this, CubeTexturePass);\n    _this = _super.call(this);\n    _this.camera = camera;\n    _this.needsSwap = false;\n    _this.cubeShader = ShaderLib[\"cube\"];\n    _this.cubeMesh = new Mesh(new BoxGeometry(10, 10, 10), new ShaderMaterial({\n      uniforms: UniformsUtils.clone(_this.cubeShader.uniforms),\n      vertexShader: _this.cubeShader.vertexShader,\n      fragmentShader: _this.cubeShader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      side: BackSide\n    }));\n    Object.defineProperty(_this.cubeMesh.material, \"envMap\", {\n      get: function get() {\n        return this.uniforms.tCube.value;\n      }\n    });\n    _this.tCube = tCube;\n    _this.opacity = opacity;\n    _this.cubeScene = new Scene();\n    _this.cubeCamera = new PerspectiveCamera();\n    _this.cubeScene.add(_this.cubeMesh);\n    return _this;\n  }\n  _createClass(CubeTexturePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix);\n      this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld);\n      this.cubeMesh.material.uniforms.tCube.value = this.tCube;\n      this.cubeMesh.material.uniforms.tFlip.value = this.tCube.isCubeTexture && this.tCube.isRenderTargetTexture === false ? -1 : 1;\n      this.cubeMesh.material.uniforms.opacity.value = this.opacity;\n      this.cubeMesh.material.transparent = this.opacity < 1;\n      renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.cubeScene, this.cubeCamera);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.cubeMesh.geometry.dispose();\n      this.cubeMesh.material.dispose();\n    }\n  }]);\n  return CubeTexturePass;\n}(Pass);\nexport { CubeTexturePass };\n//# sourceMappingURL=CubeTexturePass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}