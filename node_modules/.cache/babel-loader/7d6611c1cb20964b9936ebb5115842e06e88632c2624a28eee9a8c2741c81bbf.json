{"ast":null,"code":"import { Vector4, Vector3 } from \"three\";\nfunction findSpan(p, u, U) {\n  var n = U.length - p - 1;\n  if (u >= U[n]) {\n    return n - 1;\n  }\n  if (u <= U[p]) {\n    return p;\n  }\n  var low = p;\n  var high = n;\n  var mid = Math.floor((low + high) / 2);\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return mid;\n}\nfunction calcBasisFunctions(span, u, p, U) {\n  var N = [];\n  var left = [];\n  var right = [];\n  N[0] = 1;\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0;\n    for (var r = 0; r < j; ++r) {\n      var rv = right[r + 1];\n      var lv = left[j - r];\n      var temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    N[j] = saved;\n  }\n  return N;\n}\nfunction calcBSplinePoint(p, U, P, u) {\n  var span = findSpan(p, u, U);\n  var N = calcBasisFunctions(span, u, p, U);\n  var C = new Vector4(0, 0, 0, 0);\n  for (var j = 0; j <= p; ++j) {\n    var point = P[span - p + j];\n    var Nj = N[j];\n    var wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n  return C;\n}\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  var zeroArr = [];\n  for (var i = 0; i <= p; ++i) zeroArr[i] = 0;\n  var ders = [];\n  for (var _i = 0; _i <= n; ++_i) ders[_i] = zeroArr.slice(0);\n  var ndu = [];\n  for (var _i2 = 0; _i2 <= p; ++_i2) ndu[_i2] = zeroArr.slice(0);\n  ndu[0][0] = 1;\n  var left = zeroArr.slice(0);\n  var right = zeroArr.slice(0);\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0;\n    for (var r2 = 0; r2 < j; ++r2) {\n      var rv = right[r2 + 1];\n      var lv = left[j - r2];\n      ndu[j][r2] = rv + lv;\n      var temp = ndu[r2][j - 1] / ndu[j][r2];\n      ndu[r2][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    ndu[j][j] = saved;\n  }\n  for (var _j = 0; _j <= p; ++_j) {\n    ders[0][_j] = ndu[_j][p];\n  }\n  for (var _r = 0; _r <= p; ++_r) {\n    var s1 = 0;\n    var s2 = 1;\n    var a = [];\n    for (var _i3 = 0; _i3 <= p; ++_i3) {\n      a[_i3] = zeroArr.slice(0);\n    }\n    a[0][0] = 1;\n    for (var k = 1; k <= n; ++k) {\n      var d = 0;\n      var rk = _r - k;\n      var pk = p - k;\n      if (_r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n      var j1 = rk >= -1 ? 1 : -rk;\n      var j2 = _r - 1 <= pk ? k - 1 : p - _r;\n      for (var j3 = j1; j3 <= j2; ++j3) {\n        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];\n        d += a[s2][j3] * ndu[rk + j3][pk];\n      }\n      if (_r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][_r];\n        d += a[s2][k] * ndu[_r][pk];\n      }\n      ders[k][_r] = d;\n      var _j2 = s1;\n      s1 = s2;\n      s2 = _j2;\n    }\n  }\n  var r = p;\n  for (var _k = 1; _k <= n; ++_k) {\n    for (var _j3 = 0; _j3 <= p; ++_j3) {\n      ders[_k][_j3] *= r;\n    }\n    r *= p - _k;\n  }\n  return ders;\n}\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  var du = nd < p ? nd : p;\n  var CK = [];\n  var span = findSpan(p, u, U);\n  var nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  var Pw = [];\n  for (var i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    var w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n  for (var k = 0; k <= du; ++k) {\n    var _point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n    for (var j = 1; j <= p; ++j) {\n      _point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n    CK[k] = _point;\n  }\n  for (var _k2 = du + 1; _k2 <= nd + 1; ++_k2) {\n    CK[_k2] = new Vector4(0, 0, 0);\n  }\n  return CK;\n}\nfunction calcKoverI(k, i) {\n  var nom = 1;\n  for (var j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n  var denom = 1;\n  for (var _j4 = 2; _j4 <= i; ++_j4) {\n    denom *= _j4;\n  }\n  for (var _j5 = 2; _j5 <= k - i; ++_j5) {\n    denom *= _j5;\n  }\n  return nom / denom;\n}\nfunction calcRationalCurveDerivatives(Pders) {\n  var nd = Pders.length;\n  var Aders = [];\n  var wders = [];\n  for (var i = 0; i < nd; ++i) {\n    var point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n  var CK = [];\n  for (var k = 0; k < nd; ++k) {\n    var v = Aders[k].clone();\n    for (var _i4 = 1; _i4 <= k; ++_i4) {\n      v.sub(CK[k - _i4].clone().multiplyScalar(calcKoverI(k, _i4) * wders[_i4]));\n    }\n    CK[k] = v.divideScalar(wders[0]);\n  }\n  return CK;\n}\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  var Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  var uspan = findSpan(p, u, U);\n  var vspan = findSpan(q, v, V);\n  var Nu = calcBasisFunctions(uspan, u, p, U);\n  var Nv = calcBasisFunctions(vspan, v, q, V);\n  var temp = [];\n  for (var l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n    for (var k = 0; k <= p; ++k) {\n      var point = P[uspan - p + k][vspan - q + l].clone();\n      var w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n  var Sw = new Vector4(0, 0, 0, 0);\n  for (var _l = 0; _l <= q; ++_l) {\n    Sw.add(temp[_l].multiplyScalar(Nv[_l]));\n  }\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };\n//# sourceMappingURL=NURBSUtils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}