{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from \"three\";\nvar PCDLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PCDLoader, _Loader);\n  var _super = _createSuper(PCDLoader);\n  function PCDLoader(manager) {\n    var _this;\n    _classCallCheck(this, PCDLoader);\n    _this = _super.call(this, manager);\n    _this.littleEndian = true;\n    return _this;\n  }\n  _createClass(PCDLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, url));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, url) {\n      function decompressLZF(inData, outLength) {\n        var inLength = inData.length;\n        var outData = new Uint8Array(outLength);\n        var inPtr = 0;\n        var outPtr = 0;\n        var ctrl;\n        var len;\n        var ref;\n        do {\n          ctrl = inData[inPtr++];\n          if (ctrl < 1 << 5) {\n            ctrl++;\n            if (outPtr + ctrl > outLength) throw new Error(\"Output buffer is not large enough\");\n            if (inPtr + ctrl > inLength) throw new Error(\"Invalid compressed data\");\n            do {\n              outData[outPtr++] = inData[inPtr++];\n            } while (--ctrl);\n          } else {\n            len = ctrl >> 5;\n            ref = outPtr - ((ctrl & 31) << 8) - 1;\n            if (inPtr >= inLength) throw new Error(\"Invalid compressed data\");\n            if (len === 7) {\n              len += inData[inPtr++];\n              if (inPtr >= inLength) throw new Error(\"Invalid compressed data\");\n            }\n            ref -= inData[inPtr++];\n            if (outPtr + len + 2 > outLength) throw new Error(\"Output buffer is not large enough\");\n            if (ref < 0) throw new Error(\"Invalid compressed data\");\n            if (ref >= outPtr) throw new Error(\"Invalid compressed data\");\n            do {\n              outData[outPtr++] = outData[ref++];\n            } while (--len + 2);\n          }\n        } while (inPtr < inLength);\n        return outData;\n      }\n      function parseHeader(data2) {\n        var PCDheader2 = {};\n        var result1 = data2.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n        var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data2.substr(result1 - 1));\n        PCDheader2.data = result2[1];\n        PCDheader2.headerLen = result2[0].length + result1;\n        PCDheader2.str = data2.substr(0, PCDheader2.headerLen);\n        PCDheader2.str = PCDheader2.str.replace(/\\#.*/gi, \"\");\n        PCDheader2.version = /VERSION (.*)/i.exec(PCDheader2.str);\n        PCDheader2.fields = /FIELDS (.*)/i.exec(PCDheader2.str);\n        PCDheader2.size = /SIZE (.*)/i.exec(PCDheader2.str);\n        PCDheader2.type = /TYPE (.*)/i.exec(PCDheader2.str);\n        PCDheader2.count = /COUNT (.*)/i.exec(PCDheader2.str);\n        PCDheader2.width = /WIDTH (.*)/i.exec(PCDheader2.str);\n        PCDheader2.height = /HEIGHT (.*)/i.exec(PCDheader2.str);\n        PCDheader2.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader2.str);\n        PCDheader2.points = /POINTS (.*)/i.exec(PCDheader2.str);\n        if (PCDheader2.version !== null) PCDheader2.version = parseFloat(PCDheader2.version[1]);\n        if (PCDheader2.fields !== null) PCDheader2.fields = PCDheader2.fields[1].split(\" \");\n        if (PCDheader2.type !== null) PCDheader2.type = PCDheader2.type[1].split(\" \");\n        if (PCDheader2.width !== null) PCDheader2.width = parseInt(PCDheader2.width[1]);\n        if (PCDheader2.height !== null) PCDheader2.height = parseInt(PCDheader2.height[1]);\n        if (PCDheader2.viewpoint !== null) PCDheader2.viewpoint = PCDheader2.viewpoint[1];\n        if (PCDheader2.points !== null) PCDheader2.points = parseInt(PCDheader2.points[1], 10);\n        if (PCDheader2.points === null) PCDheader2.points = PCDheader2.width * PCDheader2.height;\n        if (PCDheader2.size !== null) {\n          PCDheader2.size = PCDheader2.size[1].split(\" \").map(function (x) {\n            return parseInt(x, 10);\n          });\n        }\n        if (PCDheader2.count !== null) {\n          PCDheader2.count = PCDheader2.count[1].split(\" \").map(function (x) {\n            return parseInt(x, 10);\n          });\n        } else {\n          PCDheader2.count = [];\n          for (var i = 0, l = PCDheader2.fields.length; i < l; i++) {\n            PCDheader2.count.push(1);\n          }\n        }\n        PCDheader2.offset = {};\n        var sizeSum = 0;\n        for (var _i = 0, _l = PCDheader2.fields.length; _i < _l; _i++) {\n          if (PCDheader2.data === \"ascii\") {\n            PCDheader2.offset[PCDheader2.fields[_i]] = _i;\n          } else {\n            PCDheader2.offset[PCDheader2.fields[_i]] = sizeSum;\n            sizeSum += PCDheader2.size[_i] * PCDheader2.count[_i];\n          }\n        }\n        PCDheader2.rowSize = sizeSum;\n        return PCDheader2;\n      }\n      var textData = LoaderUtils.decodeText(new Uint8Array(data));\n      var PCDheader = parseHeader(textData);\n      var position = [];\n      var normal = [];\n      var color = [];\n      if (PCDheader.data === \"ascii\") {\n        var offset = PCDheader.offset;\n        var pcdData = textData.substr(PCDheader.headerLen);\n        var lines = pcdData.split(\"\\n\");\n        for (var i = 0, l = lines.length; i < l; i++) {\n          if (lines[i] === \"\") continue;\n          var line = lines[i].split(\" \");\n          if (offset.x !== void 0) {\n            position.push(parseFloat(line[offset.x]));\n            position.push(parseFloat(line[offset.y]));\n            position.push(parseFloat(line[offset.z]));\n          }\n          if (offset.rgb !== void 0) {\n            var rgb = parseFloat(line[offset.rgb]);\n            var r = rgb >> 16 & 255;\n            var g = rgb >> 8 & 255;\n            var b = rgb >> 0 & 255;\n            color.push(r / 255, g / 255, b / 255);\n          }\n          if (offset.normal_x !== void 0) {\n            normal.push(parseFloat(line[offset.normal_x]));\n            normal.push(parseFloat(line[offset.normal_y]));\n            normal.push(parseFloat(line[offset.normal_z]));\n          }\n        }\n      }\n      if (PCDheader.data === \"binary_compressed\") {\n        var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n        var compressedSize = sizes[0];\n        var decompressedSize = sizes[1];\n        var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n        var dataview = new DataView(decompressed.buffer);\n        var _offset = PCDheader.offset;\n        for (var _i2 = 0; _i2 < PCDheader.points; _i2++) {\n          if (_offset.x !== void 0) {\n            position.push(dataview.getFloat32(PCDheader.points * _offset.x + PCDheader.size[0] * _i2, this.littleEndian));\n            position.push(dataview.getFloat32(PCDheader.points * _offset.y + PCDheader.size[1] * _i2, this.littleEndian));\n            position.push(dataview.getFloat32(PCDheader.points * _offset.z + PCDheader.size[2] * _i2, this.littleEndian));\n          }\n          if (_offset.rgb !== void 0) {\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 2) / 255);\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 1) / 255);\n            color.push(dataview.getUint8(PCDheader.points * _offset.rgb + PCDheader.size[3] * _i2 + 0) / 255);\n          }\n          if (_offset.normal_x !== void 0) {\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_x + PCDheader.size[4] * _i2, this.littleEndian));\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_y + PCDheader.size[5] * _i2, this.littleEndian));\n            normal.push(dataview.getFloat32(PCDheader.points * _offset.normal_z + PCDheader.size[6] * _i2, this.littleEndian));\n          }\n        }\n      }\n      if (PCDheader.data === \"binary\") {\n        var _dataview = new DataView(data, PCDheader.headerLen);\n        var _offset2 = PCDheader.offset;\n        for (var _i3 = 0, row = 0; _i3 < PCDheader.points; _i3++, row += PCDheader.rowSize) {\n          if (_offset2.x !== void 0) {\n            position.push(_dataview.getFloat32(row + _offset2.x, this.littleEndian));\n            position.push(_dataview.getFloat32(row + _offset2.y, this.littleEndian));\n            position.push(_dataview.getFloat32(row + _offset2.z, this.littleEndian));\n          }\n          if (_offset2.rgb !== void 0) {\n            color.push(_dataview.getUint8(row + _offset2.rgb + 2) / 255);\n            color.push(_dataview.getUint8(row + _offset2.rgb + 1) / 255);\n            color.push(_dataview.getUint8(row + _offset2.rgb + 0) / 255);\n          }\n          if (_offset2.normal_x !== void 0) {\n            normal.push(_dataview.getFloat32(row + _offset2.normal_x, this.littleEndian));\n            normal.push(_dataview.getFloat32(row + _offset2.normal_y, this.littleEndian));\n            normal.push(_dataview.getFloat32(row + _offset2.normal_z, this.littleEndian));\n          }\n        }\n      }\n      var geometry = new BufferGeometry();\n      if (position.length > 0) geometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n      if (normal.length > 0) geometry.setAttribute(\"normal\", new Float32BufferAttribute(normal, 3));\n      if (color.length > 0) geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n      geometry.computeBoundingSphere();\n      var material = new PointsMaterial({\n        size: 5e-3\n      });\n      if (color.length > 0) {\n        material.vertexColors = true;\n      } else {\n        material.color.setHex(Math.random() * 16777215);\n      }\n      var mesh = new Points(geometry, material);\n      var name = url.split(\"\").reverse().join(\"\");\n      name = /([^\\/]*)/.exec(name);\n      name = name[1].split(\"\").reverse().join(\"\");\n      mesh.name = name;\n      return mesh;\n    }\n  }]);\n  return PCDLoader;\n}(Loader);\nexport { PCDLoader };\n//# sourceMappingURL=PCDLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}