{"ast":null,"code":"import _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"children\", \"curves\", \"object\", \"debug\", \"smooth\", \"focus\", \"offset\", \"eps\", \"damping\", \"focusDamping\", \"maxSpeed\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { misc, easing } from 'maath';\nvar isObject3DRef = function isObject3DRef(ref) {\n  return (ref == null ? void 0 : ref.current) instanceof THREE.Object3D;\n};\nvar context = /* @__PURE__ */React.createContext(null);\nfunction useMotion() {\n  return React.useContext(context);\n}\nfunction Debug(_ref) {\n  var _ref$points = _ref.points,\n    points = _ref$points === void 0 ? 50 : _ref$points;\n  var _useMotion = useMotion(),\n    path = _useMotion.path;\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    dots = _React$useState2[0],\n    setDots = _React$useState2[1];\n  var _React$useState3 = React.useState(function () {\n      return new THREE.MeshBasicMaterial({\n        color: 'black'\n      });\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    material = _React$useState4[0];\n  var _React$useState5 = React.useState(function () {\n      return new THREE.SphereGeometry(0.025, 16, 16);\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 1),\n    geometry = _React$useState6[0];\n  var last = React.useRef([]);\n  React.useEffect(function () {\n    if (path.curves !== last.current) {\n      setDots(path.getPoints(points));\n      last.current = path.curves;\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, dots.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"mesh\", {\n      key: index,\n      material: material,\n      geometry: geometry,\n      position: [item.x, item.y, item.z]\n    });\n  }));\n}\nvar MotionPathControls = /* @__PURE__ */React.forwardRef(function (_ref2, fref) {\n  var children = _ref2.children,\n    _ref2$curves = _ref2.curves,\n    curves = _ref2$curves === void 0 ? [] : _ref2$curves,\n    object = _ref2.object,\n    _ref2$debug = _ref2.debug,\n    debug = _ref2$debug === void 0 ? false : _ref2$debug,\n    _ref2$smooth = _ref2.smooth,\n    smooth = _ref2$smooth === void 0 ? false : _ref2$smooth,\n    focus = _ref2.focus,\n    _ref2$offset = _ref2.offset,\n    offset = _ref2$offset === void 0 ? undefined : _ref2$offset,\n    _ref2$eps = _ref2.eps,\n    eps = _ref2$eps === void 0 ? 0.00001 : _ref2$eps,\n    _ref2$damping = _ref2.damping,\n    damping = _ref2$damping === void 0 ? 0.1 : _ref2$damping,\n    _ref2$focusDamping = _ref2.focusDamping,\n    focusDamping = _ref2$focusDamping === void 0 ? 0.1 : _ref2$focusDamping,\n    _ref2$maxSpeed = _ref2.maxSpeed,\n    maxSpeed = _ref2$maxSpeed === void 0 ? Infinity : _ref2$maxSpeed,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var _useThree = useThree(),\n    camera = _useThree.camera;\n  var ref = React.useRef();\n  var _React$useState7 = React.useState(function () {\n      return new THREE.CurvePath();\n    }),\n    _React$useState8 = _slicedToArray(_React$useState7, 1),\n    path = _React$useState8[0];\n  var pos = React.useRef(offset !== null && offset !== void 0 ? offset : 0);\n  var state = React.useMemo(function () {\n    return {\n      focus: focus,\n      object: (object == null ? void 0 : object.current) instanceof THREE.Object3D ? object : {\n        current: camera\n      },\n      path: path,\n      current: pos.current,\n      offset: pos.current,\n      point: new THREE.Vector3(),\n      tangent: new THREE.Vector3(),\n      next: new THREE.Vector3()\n    };\n  }, [focus, object]);\n  React.useLayoutEffect(function () {\n    var _ref$current;\n    path.curves = [];\n    var _curves = curves.length > 0 ? curves : (_ref$current = ref.current) == null ? void 0 : _ref$current.__r3f.objects;\n    for (var i = 0; i < _curves.length; i++) path.add(_curves[i]);\n\n    //Smoothen curve\n    if (smooth) {\n      var points = path.getPoints(typeof smooth === 'number' ? smooth : 1);\n      var catmull = new THREE.CatmullRomCurve3(points);\n      path.curves = [catmull];\n    }\n    path.updateArcLengths();\n  });\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  React.useLayoutEffect(function () {\n    // When offset changes, normalise pos to avoid overshoot spinning\n    pos.current = misc.repeat(pos.current, 1);\n  }, [offset]);\n  var last = 0;\n  var _React$useState9 = React.useState(function () {\n      return new THREE.Vector3();\n    }),\n    _React$useState10 = _slicedToArray(_React$useState9, 1),\n    vec = _React$useState10[0];\n  useFrame(function (_state, delta) {\n    last = state.offset;\n    easing.damp(pos, 'current', offset !== undefined ? offset : state.current, damping, delta, maxSpeed, undefined, eps);\n    state.offset = misc.repeat(pos.current, 1);\n    if (path.getCurveLengths().length > 0) {\n      path.getPointAt(state.offset, state.point);\n      path.getTangentAt(state.offset, state.tangent).normalize();\n      path.getPointAt(misc.repeat(pos.current - (last - state.offset), 1), state.next);\n      var target = (object == null ? void 0 : object.current) instanceof THREE.Object3D ? object.current : camera;\n      target.position.copy(state.point);\n      //@ts-ignore\n      if (focus) {\n        easing.dampLookAt(target, isObject3DRef(focus) ? focus.current.getWorldPosition(vec) : focus, focusDamping, delta, maxSpeed, undefined, eps);\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(context.Provider, {\n    value: state\n  }, children, debug && /*#__PURE__*/React.createElement(Debug, null)));\n});\nexport { MotionPathControls, useMotion };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}