{"ast":null,"code":"import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport D_GGX from './D_GGX.js';\nimport { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { iridescence } from '../../core/PropertyNode.js';\nimport { tslFn } from '../../shadernode/ShaderNode.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = tslFn(inputs => {\n  const {\n    lightDirection,\n    f0,\n    f90,\n    roughness,\n    iridescenceFresnel\n  } = inputs;\n  const normalView = inputs.normalView || transformedNormalView;\n  const alpha = roughness.pow2(); // UE4's roughness\n\n  const halfDir = lightDirection.add(positionViewDirection).normalize();\n  const dotNL = normalView.dot(lightDirection).clamp();\n  const dotNV = normalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n  const dotNH = normalView.dot(halfDir).clamp();\n  const dotVH = positionViewDirection.dot(halfDir).clamp();\n  let F = F_Schlick({\n    f0,\n    f90,\n    dotVH\n  });\n  if (iridescenceFresnel) {\n    F = iridescence.mix(F, iridescenceFresnel);\n  }\n  const V = V_GGX_SmithCorrelated({\n    alpha,\n    dotNL,\n    dotNV\n  });\n  const D = D_GGX({\n    alpha,\n    dotNH\n  });\n  return F.mul(V).mul(D);\n}); // validated\n\nexport default BRDF_GGX;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}