{"ast":null,"code":"import _classCallCheck from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader } from \"three\";\nvar KTXLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(KTXLoader, _CompressedTextureLoa);\n  var _super = _createSuper(KTXLoader);\n  function KTXLoader(manager) {\n    _classCallCheck(this, KTXLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(KTXLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var ktx = new KhronosTextureContainer(buffer, 1);\n      return {\n        mipmaps: ktx.mipmaps(loadMipmaps),\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        format: ktx.glInternalFormat,\n        isCubemap: ktx.numberOfFaces === 6,\n        mipmapCount: ktx.numberOfMipmapLevels\n      };\n    }\n  }]);\n  return KTXLoader;\n}(CompressedTextureLoader);\nvar HEADER_LEN = 12 + 13 * 4;\nvar COMPRESSED_2D = 0;\nvar KhronosTextureContainer = /*#__PURE__*/function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected) {\n    _classCallCheck(this, KhronosTextureContainer);\n    this.arrayBuffer = arrayBuffer;\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n      console.error(\"texture missing KTX identifier\");\n      return;\n    }\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 67305985;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n    if (this.glType !== 0) {\n      console.warn(\"only compressed formats currently supported\");\n      return;\n    } else {\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn(\"only 2D textures currently supported\");\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn(\"texture arrays not currently supported\");\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    }\n    this.loadType = COMPRESSED_2D;\n  }\n  _createClass(KhronosTextureContainer, [{\n    key: \"mipmaps\",\n    value: function mipmaps(loadMipmaps) {\n      var mipmaps = [];\n      var dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n      var width = this.pixelWidth;\n      var height = this.pixelHeight;\n      var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n      for (var level = 0; level < mipmapCount; level++) {\n        var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n        dataOffset += 4;\n        for (var face = 0; face < this.numberOfFaces; face++) {\n          var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n          mipmaps.push({\n            data: byteArray,\n            width: width,\n            height: height\n          });\n          dataOffset += imageSize;\n          dataOffset += 3 - (imageSize + 3) % 4;\n        }\n        width = Math.max(1, width * 0.5);\n        height = Math.max(1, height * 0.5);\n      }\n      return mipmaps;\n    }\n  }]);\n  return KhronosTextureContainer;\n}();\nexport { KTXLoader };\n//# sourceMappingURL=KTXLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}