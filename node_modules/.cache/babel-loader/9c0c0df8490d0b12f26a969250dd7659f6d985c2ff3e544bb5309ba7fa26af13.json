{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nimport { varying } from './VaryingNode.js';\nimport { nodeObject } from '../shadernode/ShaderNode.js';\nclass AttributeNode extends Node {\n  constructor(attributeName, nodeType = null) {\n    super(nodeType);\n    this._attributeName = attributeName;\n  }\n  getHash(builder) {\n    return this.getAttributeName(builder);\n  }\n  getNodeType(builder) {\n    let nodeType = super.getNodeType(builder);\n    if (nodeType === null) {\n      const attributeName = this.getAttributeName(builder);\n      if (builder.hasGeometryAttribute(attributeName)) {\n        const attribute = builder.geometry.getAttribute(attributeName);\n        nodeType = builder.getTypeFromAttribute(attribute);\n      } else {\n        nodeType = 'float';\n      }\n    }\n    return nodeType;\n  }\n  setAttributeName(attributeName) {\n    this._attributeName = attributeName;\n    return this;\n  }\n  getAttributeName( /*builder*/\n  ) {\n    return this._attributeName;\n  }\n  generate(builder) {\n    const attributeName = this.getAttributeName(builder);\n    const nodeType = this.getNodeType(builder);\n    const geometryAttribute = builder.hasGeometryAttribute(attributeName);\n    if (geometryAttribute === true) {\n      const attribute = builder.geometry.getAttribute(attributeName);\n      const attributeType = builder.getTypeFromAttribute(attribute);\n      const nodeAttribute = builder.getAttribute(attributeName, attributeType);\n      if (builder.shaderStage === 'vertex') {\n        return builder.format(nodeAttribute.name, attributeType, nodeType);\n      } else {\n        const nodeVarying = varying(this);\n        return nodeVarying.build(builder, nodeType);\n      }\n    } else {\n      console.warn(`AttributeNode: Attribute \"${attributeName}\" not found.`);\n      return builder.getConst(nodeType);\n    }\n  }\n}\nexport default AttributeNode;\nexport const attribute = (name, nodeType) => nodeObject(new AttributeNode(name, nodeType));\naddNodeClass('AttributeNode', AttributeNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}