{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { nodeImmutable, vec2 } from '../shadernode/ShaderNode.js';\nimport { Vector2, Vector4 } from 'three';\nlet resolution, viewportResult;\nclass ViewportNode extends Node {\n  constructor(scope) {\n    super();\n    this.scope = scope;\n    this.isViewportNode = true;\n  }\n  getNodeType() {\n    return this.scope === ViewportNode.COORDINATE || this.scope === ViewportNode.VIEWPORT ? 'vec4' : 'vec2';\n  }\n  getUpdateType() {\n    let updateType = NodeUpdateType.NONE;\n    if (this.scope === ViewportNode.RESOLUTION || this.scope === ViewportNode.VIEWPORT) {\n      updateType = NodeUpdateType.FRAME;\n    }\n    this.updateType = updateType;\n    return updateType;\n  }\n  update({\n    renderer\n  }) {\n    if (this.scope === ViewportNode.VIEWPORT) {\n      renderer.getViewport(viewportResult);\n    } else {\n      renderer.getDrawingBufferSize(resolution);\n    }\n  }\n  setup(builder) {\n    const scope = this.scope;\n    if (scope === ViewportNode.COORDINATE) return;\n    let output = null;\n    if (scope === ViewportNode.RESOLUTION) {\n      output = uniform(resolution || (resolution = new Vector2()));\n    } else if (scope === ViewportNode.VIEWPORT) {\n      output = uniform(viewportResult || (viewportResult = new Vector4()));\n    } else {\n      const coordinateNode = vec2(new ViewportNode(ViewportNode.COORDINATE));\n      const resolutionNode = new ViewportNode(ViewportNode.RESOLUTION);\n      output = coordinateNode.div(resolutionNode);\n      let outX = output.x;\n      let outY = output.y;\n      if (/top/i.test(scope) && builder.isFlipY()) outY = outY.oneMinus();else if (/bottom/i.test(scope) && builder.isFlipY() === false) outY = outY.oneMinus();\n      if (/right/i.test(scope)) outX = outX.oneMinus();\n      output = vec2(outX, outY);\n    }\n    return output;\n  }\n  generate(builder) {\n    if (this.scope === ViewportNode.COORDINATE) {\n      return builder.getFragCoord();\n    }\n    return super.generate(builder);\n  }\n}\nViewportNode.COORDINATE = 'coordinate';\nViewportNode.RESOLUTION = 'resolution';\nViewportNode.VIEWPORT = 'viewport';\nViewportNode.TOP_LEFT = 'topLeft';\nViewportNode.BOTTOM_LEFT = 'bottomLeft';\nViewportNode.TOP_RIGHT = 'topRight';\nViewportNode.BOTTOM_RIGHT = 'bottomRight';\nexport default ViewportNode;\nexport const viewportCoordinate = nodeImmutable(ViewportNode, ViewportNode.COORDINATE);\nexport const viewportResolution = nodeImmutable(ViewportNode, ViewportNode.RESOLUTION);\nexport const viewport = nodeImmutable(ViewportNode, ViewportNode.VIEWPORT);\nexport const viewportTopLeft = nodeImmutable(ViewportNode, ViewportNode.TOP_LEFT);\nexport const viewportBottomLeft = nodeImmutable(ViewportNode, ViewportNode.BOTTOM_LEFT);\nexport const viewportTopRight = nodeImmutable(ViewportNode, ViewportNode.TOP_RIGHT);\nexport const viewportBottomRight = nodeImmutable(ViewportNode, ViewportNode.BOTTOM_RIGHT);\naddNodeClass('ViewportNode', ViewportNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}