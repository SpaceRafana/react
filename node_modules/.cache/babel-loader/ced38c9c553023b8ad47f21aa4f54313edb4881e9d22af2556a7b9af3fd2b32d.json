{"ast":null,"code":"import _slicedToArray from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/Mon Site/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"geometry\", \"simplify\"],\n  _excluded2 = [\"simplify\"],\n  _excluded3 = [\"geometry\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { WireframeMaterial, WireframeMaterialShaders, useWireframeUniforms, setWireframeOverride } from '../materials/WireframeMaterial.js';\nfunction isWithGeometry(object) {\n  return !!(object != null && object.geometry);\n}\nfunction isGeometry(object) {\n  return !!(object != null && object.isBufferGeometry);\n}\nfunction isRefObject(object) {\n  return !!(object != null && object.current);\n}\nfunction isRef(object) {\n  return (object == null ? void 0 : object.current) !== undefined;\n}\nfunction isWireframeGeometry(geometry) {\n  return geometry.type === 'WireframeGeometry';\n}\nfunction getUniforms() {\n  var u = {};\n  for (var key in WireframeMaterialShaders.uniforms) {\n    u[key] = {\n      value: WireframeMaterialShaders.uniforms[key]\n    };\n  }\n  return u;\n}\nfunction getBarycentricCoordinates(geometry, removeEdge) {\n  var position = geometry.getAttribute('position');\n  var count = position.count;\n  var barycentric = [];\n  for (var i = 0; i < count; i++) {\n    var even = i % 2 === 0;\n    var Q = removeEdge ? 1 : 0;\n    if (even) {\n      barycentric.push(0, 0, 1, 0, 1, 0, 1, 0, Q);\n    } else {\n      barycentric.push(0, 1, 0, 0, 0, 1, 1, 0, Q);\n    }\n  }\n  return new THREE.BufferAttribute(Float32Array.from(barycentric), 3);\n}\nfunction getInputGeometry(inputGeometry) {\n  var geo = isRefObject(inputGeometry) ? inputGeometry.current : inputGeometry;\n  if (!isGeometry(geo)) {\n    // Disallow WireframeGeometry\n    if (isWireframeGeometry(geo)) {\n      throw new Error('Wireframe: WireframeGeometry is not supported.');\n    }\n    var parent = geo.parent;\n    if (isWithGeometry(parent)) {\n      // Disallow WireframeGeometry\n      if (isWireframeGeometry(parent.geometry)) {\n        throw new Error('Wireframe: WireframeGeometry is not supported.');\n      }\n      return parent.geometry;\n    }\n  } else {\n    return geo;\n  }\n}\nfunction setBarycentricCoordinates(geometry, simplify) {\n  if (geometry.index) {\n    console.warn('Wireframe: Requires non-indexed geometry, converting to non-indexed geometry.');\n    var nonIndexedGeo = geometry.toNonIndexed();\n    geometry.copy(nonIndexedGeo);\n    geometry.setIndex(null);\n  }\n  var newBarycentric = getBarycentricCoordinates(geometry, simplify);\n  geometry.setAttribute('barycentric', newBarycentric);\n}\nfunction WireframeWithCustomGeo(_ref) {\n  var customGeometry = _ref.geometry,\n    _ref$simplify = _ref.simplify,\n    simplify = _ref$simplify === void 0 ? false : _ref$simplify,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    MeshWireframeMaterial: WireframeMaterial\n  });\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    geometry = _React$useState2[0],\n    setGeometry = _React$useState2[1];\n  React.useLayoutEffect(function () {\n    var geom = getInputGeometry(customGeometry);\n    if (!geom) {\n      throw new Error('Wireframe: geometry prop must be a BufferGeometry or a ref to a BufferGeometry.');\n    }\n    setBarycentricCoordinates(geom, simplify);\n    if (isRef(customGeometry)) {\n      setGeometry(geom);\n    }\n  }, [simplify, customGeometry]);\n  var drawnGeo = isRef(customGeometry) ? geometry : customGeometry;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, drawnGeo && /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: drawnGeo\n  }, /*#__PURE__*/React.createElement(\"meshWireframeMaterial\", _extends({\n    attach: \"material\",\n    transparent: true,\n    side: THREE.DoubleSide,\n    polygonOffset: true //\n    ,\n\n    polygonOffsetFactor: -4\n  }, props, {\n    extensions: {\n      derivatives: true,\n      fragDepth: false,\n      drawBuffers: false,\n      shaderTextureLOD: false\n    }\n  }))));\n}\nfunction WireframeWithoutCustomGeo(_ref2) {\n  var _ref2$simplify = _ref2.simplify,\n    simplify = _ref2$simplify === void 0 ? false : _ref2$simplify,\n    props = _objectWithoutProperties(_ref2, _excluded2);\n  var objectRef = React.useRef(null);\n  var uniforms = React.useMemo(function () {\n    return getUniforms();\n  }, [WireframeMaterialShaders.uniforms]);\n  useWireframeUniforms(uniforms, props);\n  React.useLayoutEffect(function () {\n    var geom = getInputGeometry(objectRef);\n    if (!geom) {\n      throw new Error('Wireframe: Must be a child of a Mesh, Line or Points object or specify a geometry prop.');\n    }\n    var og = geom.clone();\n    setBarycentricCoordinates(geom, simplify);\n    return function () {\n      geom.copy(og);\n      og.dispose();\n    };\n  }, [simplify]);\n  React.useLayoutEffect(function () {\n    var parentMesh = objectRef.current.parent;\n    var og = parentMesh.material.clone();\n    setWireframeOverride(parentMesh.material, uniforms);\n    return function () {\n      parentMesh.material.dispose();\n      parentMesh.material = og;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"object3D\", {\n    ref: objectRef\n  });\n}\nfunction Wireframe(_ref3) {\n  var customGeometry = _ref3.geometry,\n    props = _objectWithoutProperties(_ref3, _excluded3);\n  if (customGeometry) {\n    return /*#__PURE__*/React.createElement(WireframeWithCustomGeo, _extends({\n      geometry: customGeometry\n    }, props));\n  }\n  return /*#__PURE__*/React.createElement(WireframeWithoutCustomGeo, props);\n}\nexport { Wireframe };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}