{"ast":null,"code":"import Node, { addNodeClass } from '../core/Node.js';\nimport { attribute } from '../core/AttributeNode.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { modelWorldMatrix, modelViewMatrix } from './ModelNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nclass PositionNode extends Node {\n  constructor(scope = PositionNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n  isGlobal() {\n    return true;\n  }\n  getHash( /*builder*/\n  ) {\n    return `position-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === PositionNode.GEOMETRY) {\n      outputNode = attribute('position', 'vec3');\n    } else if (scope === PositionNode.LOCAL) {\n      outputNode = varying(positionGeometry);\n    } else if (scope === PositionNode.WORLD) {\n      const vertexPositionNode = modelWorldMatrix.mul(positionLocal);\n      outputNode = varying(vertexPositionNode);\n    } else if (scope === PositionNode.VIEW) {\n      const vertexPositionNode = modelViewMatrix.mul(positionLocal);\n      outputNode = varying(vertexPositionNode);\n    } else if (scope === PositionNode.VIEW_DIRECTION) {\n      const vertexPositionNode = positionView.negate();\n      outputNode = normalize(varying(vertexPositionNode));\n    } else if (scope === PositionNode.WORLD_DIRECTION) {\n      const vertexPositionNode = positionLocal.transformDirection(modelWorldMatrix);\n      outputNode = normalize(varying(vertexPositionNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nPositionNode.GEOMETRY = 'geometry';\nPositionNode.LOCAL = 'local';\nPositionNode.WORLD = 'world';\nPositionNode.WORLD_DIRECTION = 'worldDirection';\nPositionNode.VIEW = 'view';\nPositionNode.VIEW_DIRECTION = 'viewDirection';\nexport default PositionNode;\nexport const positionGeometry = nodeImmutable(PositionNode, PositionNode.GEOMETRY);\nexport const positionLocal = nodeImmutable(PositionNode, PositionNode.LOCAL);\nexport const positionWorld = nodeImmutable(PositionNode, PositionNode.WORLD);\nexport const positionWorldDirection = nodeImmutable(PositionNode, PositionNode.WORLD_DIRECTION);\nexport const positionView = nodeImmutable(PositionNode, PositionNode.VIEW);\nexport const positionViewDirection = nodeImmutable(PositionNode, PositionNode.VIEW_DIRECTION);\naddNodeClass('PositionNode', PositionNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}