{"ast":null,"code":"import Node, { addNodeClass } from './Node.js';\nclass TempNode extends Node {\n  constructor(type) {\n    super(type);\n    this.isTempNode = true;\n  }\n  hasDependencies(builder) {\n    return builder.getDataFromNode(this).dependenciesCount > 1;\n  }\n  build(builder, output) {\n    const buildStage = builder.getBuildStage();\n    if (buildStage === 'generate') {\n      const type = builder.getVectorType(this.getNodeType(builder, output));\n      const nodeData = builder.getDataFromNode(this);\n      if (builder.context.tempRead !== false && nodeData.propertyName !== undefined) {\n        return builder.format(nodeData.propertyName, type, output);\n      } else if (builder.context.tempWrite !== false && type !== 'void' && output !== 'void' && this.hasDependencies(builder)) {\n        const snippet = super.build(builder, type);\n        const nodeVar = builder.getVarFromNode(this, type);\n        const propertyName = builder.getPropertyName(nodeVar);\n        builder.addLineFlowCode(`${propertyName} = ${snippet}`);\n        nodeData.snippet = snippet;\n        nodeData.propertyName = propertyName;\n        return builder.format(nodeData.propertyName, type, output);\n      }\n    }\n    return super.build(builder, output);\n  }\n}\nexport default TempNode;\naddNodeClass('TempNode', TempNode);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}