{"ast":null,"code":"import Node from '../core/Node.js';\nimport AnalyticLightNode from './AnalyticLightNode.js';\nimport { nodeObject, nodeProxy } from '../shadernode/ShaderNode.js';\nconst LightNodes = new WeakMap();\nconst sortLights = lights => {\n  return lights.sort((a, b) => a.id - b.id);\n};\nclass LightsNode extends Node {\n  constructor(lightNodes = []) {\n    super('vec3');\n    this.lightNodes = lightNodes;\n    this._hash = null;\n  }\n  get hasLight() {\n    return this.lightNodes.length > 0;\n  }\n  setup(builder) {\n    const lightNodes = this.lightNodes;\n    for (const lightNode of lightNodes) {\n      lightNode.build(builder);\n    }\n  }\n  getHash(builder) {\n    if (this._hash === null) {\n      let hash = '';\n      const lightNodes = this.lightNodes;\n      for (const lightNode of lightNodes) {\n        hash += lightNode.getHash(builder) + ' ';\n      }\n      this._hash = hash;\n    }\n    return this._hash;\n  }\n  getLightNodeByHash(hash) {\n    const lightNodes = this.lightNodes;\n    for (const lightNode of lightNodes) {\n      if (lightNode.light.uuid === hash) {\n        return lightNode;\n      }\n    }\n    return null;\n  }\n  fromLights(lights = []) {\n    const lightNodes = [];\n    lights = sortLights(lights);\n    for (const light of lights) {\n      let lightNode = this.getLightNodeByHash(light.uuid);\n      if (lightNode === null) {\n        const lightClass = light.constructor;\n        const lightNodeClass = LightNodes.has(lightClass) ? LightNodes.get(lightClass) : AnalyticLightNode;\n        lightNode = nodeObject(new lightNodeClass(light));\n      }\n      lightNodes.push(lightNode);\n    }\n    this.lightNodes = lightNodes;\n    this._hash = null;\n    return this;\n  }\n}\nexport default LightsNode;\nexport const lights = lights => nodeObject(new LightsNode().fromLights(lights));\nexport const lightsWithoutWrap = nodeProxy(LightsNode);\nexport function addLightNode(lightClass, lightNodeClass) {\n  if (LightNodes.has(lightClass)) throw new Error(`Redefinition of light node ${lightNodeClass.type}`);\n  if (typeof lightClass !== 'function') throw new Error(`Light ${lightClass.name} is not a class`);\n  if (typeof lightNodeClass !== 'function' || !lightNodeClass.type) throw new Error(`Light node ${lightNodeClass.type} is not a class`);\n  LightNodes.set(lightClass, lightNodeClass);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}